/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.main;


import open.tresorier.generated.jooq.main.tables.Account;
import open.tresorier.generated.jooq.main.tables.Allocation;
import open.tresorier.generated.jooq.main.tables.BankAccount;
import open.tresorier.generated.jooq.main.tables.BankAgreement;
import open.tresorier.generated.jooq.main.tables.Budget;
import open.tresorier.generated.jooq.main.tables.Category;
import open.tresorier.generated.jooq.main.tables.FlywaySchemaHistory;
import open.tresorier.generated.jooq.main.tables.MasterCategory;
import open.tresorier.generated.jooq.main.tables.Operation;
import open.tresorier.generated.jooq.main.tables.Person;
import open.tresorier.generated.jooq.main.tables.UserActivity;
import open.tresorier.generated.jooq.main.tables.records.AccountRecord;
import open.tresorier.generated.jooq.main.tables.records.AllocationRecord;
import open.tresorier.generated.jooq.main.tables.records.BankAccountRecord;
import open.tresorier.generated.jooq.main.tables.records.BankAgreementRecord;
import open.tresorier.generated.jooq.main.tables.records.BudgetRecord;
import open.tresorier.generated.jooq.main.tables.records.CategoryRecord;
import open.tresorier.generated.jooq.main.tables.records.FlywaySchemaHistoryRecord;
import open.tresorier.generated.jooq.main.tables.records.MasterCategoryRecord;
import open.tresorier.generated.jooq.main.tables.records.OperationRecord;
import open.tresorier.generated.jooq.main.tables.records.PersonRecord;
import open.tresorier.generated.jooq.main.tables.records.UserActivityRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AllocationRecord> COMPOSITE_ID = Internal.createUniqueKey(Allocation.ALLOCATION, DSL.name("composite_id"), new TableField[] { Allocation.ALLOCATION.CATEGORY_ID, Allocation.ALLOCATION.MONTH }, true);
    public static final UniqueKey<BankAccountRecord> BANK_ACCOUNT_PKEY = Internal.createUniqueKey(BankAccount.BANK_ACCOUNT, DSL.name("bank_account_pkey"), new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final UniqueKey<BankAgreementRecord> BANK_AGREEMENT_PKEY = Internal.createUniqueKey(BankAgreement.BANK_AGREEMENT, DSL.name("bank_agreement_pkey"), new TableField[] { BankAgreement.BANK_AGREEMENT.ID }, true);
    public static final UniqueKey<BudgetRecord> BUDGET_PKEY = Internal.createUniqueKey(Budget.BUDGET, DSL.name("budget_pkey"), new TableField[] { Budget.BUDGET.ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY_PKEY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<MasterCategoryRecord> MASTER_CATEGORY_PKEY = Internal.createUniqueKey(MasterCategory.MASTER_CATEGORY, DSL.name("master_category_pkey"), new TableField[] { MasterCategory.MASTER_CATEGORY.ID }, true);
    public static final UniqueKey<OperationRecord> OPERATION_IMPORT_IDENTIFIER_KEY = Internal.createUniqueKey(Operation.OPERATION, DSL.name("operation_import_identifier_key"), new TableField[] { Operation.OPERATION.IMPORT_IDENTIFIER }, true);
    public static final UniqueKey<OperationRecord> OPERATION_PKEY = Internal.createUniqueKey(Operation.OPERATION, DSL.name("operation_pkey"), new TableField[] { Operation.OPERATION.ID }, true);
    public static final UniqueKey<PersonRecord> PERSON_BILLING_ID_KEY = Internal.createUniqueKey(Person.PERSON, DSL.name("person_billing_id_key"), new TableField[] { Person.PERSON.BILLING_ID }, true);
    public static final UniqueKey<PersonRecord> PERSON_EMAIL_KEY = Internal.createUniqueKey(Person.PERSON, DSL.name("person_email_key"), new TableField[] { Person.PERSON.EMAIL }, true);
    public static final UniqueKey<PersonRecord> PERSON_PKEY = Internal.createUniqueKey(Person.PERSON, DSL.name("person_pkey"), new TableField[] { Person.PERSON.ID }, true);
    public static final UniqueKey<UserActivityRecord> USER_ACTIVITY_PKEY = Internal.createUniqueKey(UserActivity.USER_ACTIVITY, DSL.name("user_activity_pkey"), new TableField[] { UserActivity.USER_ACTIVITY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, BankAccountRecord> ACCOUNT__ACCOUNT_BANK_ACCOUNT_ID_FKEY = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_bank_account_id_fkey"), new TableField[] { Account.ACCOUNT.BANK_ACCOUNT_ID }, Keys.BANK_ACCOUNT_PKEY, new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final ForeignKey<AccountRecord, BudgetRecord> ACCOUNT__ACCOUNT_BUDGET_ID_FKEY = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_budget_id_fkey"), new TableField[] { Account.ACCOUNT.BUDGET_ID }, Keys.BUDGET_PKEY, new TableField[] { Budget.BUDGET.ID }, true);
    public static final ForeignKey<AllocationRecord, CategoryRecord> ALLOCATION__ALLOCATION_CATEGORY_ID_FKEY = Internal.createForeignKey(Allocation.ALLOCATION, DSL.name("allocation_category_id_fkey"), new TableField[] { Allocation.ALLOCATION.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<BankAccountRecord, BankAgreementRecord> BANK_ACCOUNT__BANK_ACCOUNT_AGREEMENT_ID_FKEY = Internal.createForeignKey(BankAccount.BANK_ACCOUNT, DSL.name("bank_account_agreement_id_fkey"), new TableField[] { BankAccount.BANK_ACCOUNT.AGREEMENT_ID }, Keys.BANK_AGREEMENT_PKEY, new TableField[] { BankAgreement.BANK_AGREEMENT.ID }, true);
    public static final ForeignKey<BankAgreementRecord, BudgetRecord> BANK_AGREEMENT__BANK_AGREEMENT_BUDGET_ID_FKEY = Internal.createForeignKey(BankAgreement.BANK_AGREEMENT, DSL.name("bank_agreement_budget_id_fkey"), new TableField[] { BankAgreement.BANK_AGREEMENT.BUDGET_ID }, Keys.BUDGET_PKEY, new TableField[] { Budget.BUDGET.ID }, true);
    public static final ForeignKey<BudgetRecord, PersonRecord> BUDGET__BUDGET_PERSON_ID_FKEY = Internal.createForeignKey(Budget.BUDGET, DSL.name("budget_person_id_fkey"), new TableField[] { Budget.BUDGET.PERSON_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<CategoryRecord, MasterCategoryRecord> CATEGORY__CATEGORY_MASTER_CATEGORY_ID_FKEY = Internal.createForeignKey(Category.CATEGORY, DSL.name("category_master_category_id_fkey"), new TableField[] { Category.CATEGORY.MASTER_CATEGORY_ID }, Keys.MASTER_CATEGORY_PKEY, new TableField[] { MasterCategory.MASTER_CATEGORY.ID }, true);
    public static final ForeignKey<MasterCategoryRecord, BudgetRecord> MASTER_CATEGORY__MASTER_CATEGORY_BUDGET_ID_FKEY = Internal.createForeignKey(MasterCategory.MASTER_CATEGORY, DSL.name("master_category_budget_id_fkey"), new TableField[] { MasterCategory.MASTER_CATEGORY.BUDGET_ID }, Keys.BUDGET_PKEY, new TableField[] { Budget.BUDGET.ID }, true);
    public static final ForeignKey<OperationRecord, AccountRecord> OPERATION__OPERATION_ACCOUNT_ID_FKEY = Internal.createForeignKey(Operation.OPERATION, DSL.name("operation_account_id_fkey"), new TableField[] { Operation.OPERATION.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<OperationRecord, CategoryRecord> OPERATION__OPERATION_CATEGORY_ID_FKEY = Internal.createForeignKey(Operation.OPERATION, DSL.name("operation_category_id_fkey"), new TableField[] { Operation.OPERATION.CATEGORY_ID }, Keys.CATEGORY_PKEY, new TableField[] { Category.CATEGORY.ID }, true);
}
