/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.main.tables.daos;


import java.util.List;
import java.util.Optional;

import open.tresorier.generated.jooq.main.tables.Person;
import open.tresorier.generated.jooq.main.tables.records.PersonRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PersonDao extends DAOImpl<PersonRecord, open.tresorier.generated.jooq.main.tables.pojos.Person, String> {

    /**
     * Create a new PersonDao without any configuration
     */
    public PersonDao() {
        super(Person.PERSON, open.tresorier.generated.jooq.main.tables.pojos.Person.class);
    }

    /**
     * Create a new PersonDao with an attached configuration
     */
    public PersonDao(Configuration configuration) {
        super(Person.PERSON, open.tresorier.generated.jooq.main.tables.pojos.Person.class, configuration);
    }

    @Override
    public String getId(open.tresorier.generated.jooq.main.tables.pojos.Person object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchById(String... values) {
        return fetch(Person.PERSON.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public open.tresorier.generated.jooq.main.tables.pojos.Person fetchOneById(String value) {
        return fetchOne(Person.PERSON.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchOptionalById(String value) {
        return fetchOptional(Person.PERSON.ID, value);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByEmail(String... values) {
        return fetch(Person.PERSON.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public open.tresorier.generated.jooq.main.tables.pojos.Person fetchOneByEmail(String value) {
        return fetchOne(Person.PERSON.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchOptionalByEmail(String value) {
        return fetchOptional(Person.PERSON.EMAIL, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByName(String... values) {
        return fetch(Person.PERSON.NAME, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByPassword(String... values) {
        return fetch(Person.PERSON.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>unlockingdate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfUnlockingdate(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Person.PERSON.UNLOCKINGDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>unlockingdate IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByUnlockingdate(Long... values) {
        return fetch(Person.PERSON.UNLOCKINGDATE, values);
    }

    /**
     * Fetch records that have <code>loginattemptcount BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfLoginattemptcount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Person.PERSON.LOGINATTEMPTCOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>loginattemptcount IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByLoginattemptcount(Integer... values) {
        return fetch(Person.PERSON.LOGINATTEMPTCOUNT, values);
    }

    /**
     * Fetch records that have <code>deleted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfDeleted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Person.PERSON.DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deleted IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByDeleted(Boolean... values) {
        return fetch(Person.PERSON.DELETED, values);
    }

    /**
     * Fetch records that have <code>billing_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfBillingId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.BILLING_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>billing_id IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByBillingId(String... values) {
        return fetch(Person.PERSON.BILLING_ID, values);
    }

    /**
     * Fetch a unique record that has <code>billing_id = value</code>
     */
    public open.tresorier.generated.jooq.main.tables.pojos.Person fetchOneByBillingId(String value) {
        return fetchOne(Person.PERSON.BILLING_ID, value);
    }

    /**
     * Fetch a unique record that has <code>billing_id = value</code>
     */
    public Optional<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchOptionalByBillingId(String value) {
        return fetchOptional(Person.PERSON.BILLING_ID, value);
    }

    /**
     * Fetch records that have <code>billing_status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfBillingStatus(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Person.PERSON.BILLING_STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>billing_status IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByBillingStatus(Boolean... values) {
        return fetch(Person.PERSON.BILLING_STATUS, values);
    }

    /**
     * Fetch records that have <code>creation_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfCreationDate(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Person.PERSON.CREATION_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creation_date IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByCreationDate(Long... values) {
        return fetch(Person.PERSON.CREATION_DATE, values);
    }

    /**
     * Fetch records that have <code>style BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfStyle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Person.PERSON.STYLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>style IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByStyle(String... values) {
        return fetch(Person.PERSON.STYLE, values);
    }

    /**
     * Fetch records that have <code>dyslexia BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchRangeOfDyslexia(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Person.PERSON.DYSLEXIA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dyslexia IN (values)</code>
     */
    public List<open.tresorier.generated.jooq.main.tables.pojos.Person> fetchByDyslexia(Boolean... values) {
        return fetch(Person.PERSON.DYSLEXIA, values);
    }
}
