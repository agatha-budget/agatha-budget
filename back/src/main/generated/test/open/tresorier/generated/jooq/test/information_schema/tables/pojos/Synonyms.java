/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Synonyms implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String synonymCatalog;
    private final String synonymSchema;
    private final String synonymName;
    private final String synonymFor;
    private final String synonymForSchema;
    private final String typeName;
    private final String status;
    private final String remarks;

    public Synonyms(Synonyms value) {
        this.synonymCatalog = value.synonymCatalog;
        this.synonymSchema = value.synonymSchema;
        this.synonymName = value.synonymName;
        this.synonymFor = value.synonymFor;
        this.synonymForSchema = value.synonymForSchema;
        this.typeName = value.typeName;
        this.status = value.status;
        this.remarks = value.remarks;
    }

    public Synonyms(
        String synonymCatalog,
        String synonymSchema,
        String synonymName,
        String synonymFor,
        String synonymForSchema,
        String typeName,
        String status,
        String remarks
    ) {
        this.synonymCatalog = synonymCatalog;
        this.synonymSchema = synonymSchema;
        this.synonymName = synonymName;
        this.synonymFor = synonymFor;
        this.synonymForSchema = synonymForSchema;
        this.typeName = typeName;
        this.status = status;
        this.remarks = remarks;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_CATALOG</code>.
     */
    public String getSynonymCatalog() {
        return this.synonymCatalog;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_SCHEMA</code>.
     */
    public String getSynonymSchema() {
        return this.synonymSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_NAME</code>.
     */
    public String getSynonymName() {
        return this.synonymName;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_FOR</code>.
     */
    public String getSynonymFor() {
        return this.synonymFor;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_FOR_SCHEMA</code>.
     */
    public String getSynonymForSchema() {
        return this.synonymForSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.TYPE_NAME</code>.
     */
    public String getTypeName() {
        return this.typeName;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.STATUS</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.REMARKS</code>.
     */
    public String getRemarks() {
        return this.remarks;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Synonyms other = (Synonyms) obj;
        if (this.synonymCatalog == null) {
            if (other.synonymCatalog != null)
                return false;
        }
        else if (!this.synonymCatalog.equals(other.synonymCatalog))
            return false;
        if (this.synonymSchema == null) {
            if (other.synonymSchema != null)
                return false;
        }
        else if (!this.synonymSchema.equals(other.synonymSchema))
            return false;
        if (this.synonymName == null) {
            if (other.synonymName != null)
                return false;
        }
        else if (!this.synonymName.equals(other.synonymName))
            return false;
        if (this.synonymFor == null) {
            if (other.synonymFor != null)
                return false;
        }
        else if (!this.synonymFor.equals(other.synonymFor))
            return false;
        if (this.synonymForSchema == null) {
            if (other.synonymForSchema != null)
                return false;
        }
        else if (!this.synonymForSchema.equals(other.synonymForSchema))
            return false;
        if (this.typeName == null) {
            if (other.typeName != null)
                return false;
        }
        else if (!this.typeName.equals(other.typeName))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.remarks == null) {
            if (other.remarks != null)
                return false;
        }
        else if (!this.remarks.equals(other.remarks))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.synonymCatalog == null) ? 0 : this.synonymCatalog.hashCode());
        result = prime * result + ((this.synonymSchema == null) ? 0 : this.synonymSchema.hashCode());
        result = prime * result + ((this.synonymName == null) ? 0 : this.synonymName.hashCode());
        result = prime * result + ((this.synonymFor == null) ? 0 : this.synonymFor.hashCode());
        result = prime * result + ((this.synonymForSchema == null) ? 0 : this.synonymForSchema.hashCode());
        result = prime * result + ((this.typeName == null) ? 0 : this.typeName.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.remarks == null) ? 0 : this.remarks.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Synonyms (");

        sb.append(synonymCatalog);
        sb.append(", ").append(synonymSchema);
        sb.append(", ").append(synonymName);
        sb.append(", ").append(synonymFor);
        sb.append(", ").append(synonymForSchema);
        sb.append(", ").append(typeName);
        sb.append(", ").append(status);
        sb.append(", ").append(remarks);

        sb.append(")");
        return sb.toString();
    }
}
