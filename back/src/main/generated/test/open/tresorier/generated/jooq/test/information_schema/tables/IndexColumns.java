/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables;


import java.util.Collection;

import open.tresorier.generated.jooq.test.information_schema.InformationSchema;
import open.tresorier.generated.jooq.test.information_schema.tables.records.IndexColumnsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IndexColumns extends TableImpl<IndexColumnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.INDEX_COLUMNS</code>
     */
    public static final IndexColumns INDEX_COLUMNS = new IndexColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndexColumnsRecord> getRecordType() {
        return IndexColumnsRecord.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.INDEX_CATALOG</code>.
     */
    public final TableField<IndexColumnsRecord, String> INDEX_CATALOG = createField(DSL.name("INDEX_CATALOG"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.INDEX_SCHEMA</code>.
     */
    public final TableField<IndexColumnsRecord, String> INDEX_SCHEMA = createField(DSL.name("INDEX_SCHEMA"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.INDEX_NAME</code>.
     */
    public final TableField<IndexColumnsRecord, String> INDEX_NAME = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.TABLE_CATALOG</code>.
     */
    public final TableField<IndexColumnsRecord, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.TABLE_SCHEMA</code>.
     */
    public final TableField<IndexColumnsRecord, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.TABLE_NAME</code>.
     */
    public final TableField<IndexColumnsRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.COLUMN_NAME</code>.
     */
    public final TableField<IndexColumnsRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.INDEX_COLUMNS.ORDINAL_POSITION</code>.
     */
    public final TableField<IndexColumnsRecord, Integer> ORDINAL_POSITION = createField(DSL.name("ORDINAL_POSITION"), SQLDataType.INTEGER, this, "");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.INDEX_COLUMNS.ORDERING_SPECIFICATION</code>.
     */
    public final TableField<IndexColumnsRecord, String> ORDERING_SPECIFICATION = createField(DSL.name("ORDERING_SPECIFICATION"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.NULL_ORDERING</code>.
     */
    public final TableField<IndexColumnsRecord, String> NULL_ORDERING = createField(DSL.name("NULL_ORDERING"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEX_COLUMNS.IS_UNIQUE</code>.
     */
    public final TableField<IndexColumnsRecord, Boolean> IS_UNIQUE = createField(DSL.name("IS_UNIQUE"), SQLDataType.BOOLEAN, this, "");

    private IndexColumns(Name alias, Table<IndexColumnsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private IndexColumns(Name alias, Table<IndexColumnsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.INDEX_COLUMNS</code> table
     * reference
     */
    public IndexColumns(String alias) {
        this(DSL.name(alias), INDEX_COLUMNS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.INDEX_COLUMNS</code> table
     * reference
     */
    public IndexColumns(Name alias) {
        this(alias, INDEX_COLUMNS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.INDEX_COLUMNS</code> table reference
     */
    public IndexColumns() {
        this(DSL.name("INDEX_COLUMNS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public IndexColumns as(String alias) {
        return new IndexColumns(DSL.name(alias), this);
    }

    @Override
    public IndexColumns as(Name alias) {
        return new IndexColumns(alias, this);
    }

    @Override
    public IndexColumns as(Table<?> alias) {
        return new IndexColumns(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexColumns rename(String name) {
        return new IndexColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexColumns rename(Name name) {
        return new IndexColumns(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IndexColumns rename(Table<?> name) {
        return new IndexColumns(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IndexColumns where(Condition condition) {
        return new IndexColumns(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IndexColumns where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IndexColumns where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IndexColumns where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IndexColumns where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IndexColumns where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IndexColumns where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public IndexColumns where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IndexColumns whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public IndexColumns whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
