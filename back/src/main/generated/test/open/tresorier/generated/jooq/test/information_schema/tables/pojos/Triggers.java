/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Triggers implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String triggerCatalog;
    private final String triggerSchema;
    private final String triggerName;
    private final String eventManipulation;
    private final String eventObjectCatalog;
    private final String eventObjectSchema;
    private final String eventObjectTable;
    private final String actionOrientation;
    private final String actionTiming;
    private final Boolean isRollback;
    private final String javaClass;
    private final Integer queueSize;
    private final Boolean noWait;
    private final String remarks;

    public Triggers(Triggers value) {
        this.triggerCatalog = value.triggerCatalog;
        this.triggerSchema = value.triggerSchema;
        this.triggerName = value.triggerName;
        this.eventManipulation = value.eventManipulation;
        this.eventObjectCatalog = value.eventObjectCatalog;
        this.eventObjectSchema = value.eventObjectSchema;
        this.eventObjectTable = value.eventObjectTable;
        this.actionOrientation = value.actionOrientation;
        this.actionTiming = value.actionTiming;
        this.isRollback = value.isRollback;
        this.javaClass = value.javaClass;
        this.queueSize = value.queueSize;
        this.noWait = value.noWait;
        this.remarks = value.remarks;
    }

    public Triggers(
        String triggerCatalog,
        String triggerSchema,
        String triggerName,
        String eventManipulation,
        String eventObjectCatalog,
        String eventObjectSchema,
        String eventObjectTable,
        String actionOrientation,
        String actionTiming,
        Boolean isRollback,
        String javaClass,
        Integer queueSize,
        Boolean noWait,
        String remarks
    ) {
        this.triggerCatalog = triggerCatalog;
        this.triggerSchema = triggerSchema;
        this.triggerName = triggerName;
        this.eventManipulation = eventManipulation;
        this.eventObjectCatalog = eventObjectCatalog;
        this.eventObjectSchema = eventObjectSchema;
        this.eventObjectTable = eventObjectTable;
        this.actionOrientation = actionOrientation;
        this.actionTiming = actionTiming;
        this.isRollback = isRollback;
        this.javaClass = javaClass;
        this.queueSize = queueSize;
        this.noWait = noWait;
        this.remarks = remarks;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.TRIGGER_CATALOG</code>.
     */
    public String getTriggerCatalog() {
        return this.triggerCatalog;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.TRIGGER_SCHEMA</code>.
     */
    public String getTriggerSchema() {
        return this.triggerSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.TRIGGER_NAME</code>.
     */
    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.EVENT_MANIPULATION</code>.
     */
    public String getEventManipulation() {
        return this.eventManipulation;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.EVENT_OBJECT_CATALOG</code>.
     */
    public String getEventObjectCatalog() {
        return this.eventObjectCatalog;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.EVENT_OBJECT_SCHEMA</code>.
     */
    public String getEventObjectSchema() {
        return this.eventObjectSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.EVENT_OBJECT_TABLE</code>.
     */
    public String getEventObjectTable() {
        return this.eventObjectTable;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.ACTION_ORIENTATION</code>.
     */
    public String getActionOrientation() {
        return this.actionOrientation;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.ACTION_TIMING</code>.
     */
    public String getActionTiming() {
        return this.actionTiming;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.IS_ROLLBACK</code>.
     */
    public Boolean getIsRollback() {
        return this.isRollback;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.JAVA_CLASS</code>.
     */
    public String getJavaClass() {
        return this.javaClass;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.QUEUE_SIZE</code>.
     */
    public Integer getQueueSize() {
        return this.queueSize;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.NO_WAIT</code>.
     */
    public Boolean getNoWait() {
        return this.noWait;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TRIGGERS.REMARKS</code>.
     */
    public String getRemarks() {
        return this.remarks;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Triggers other = (Triggers) obj;
        if (this.triggerCatalog == null) {
            if (other.triggerCatalog != null)
                return false;
        }
        else if (!this.triggerCatalog.equals(other.triggerCatalog))
            return false;
        if (this.triggerSchema == null) {
            if (other.triggerSchema != null)
                return false;
        }
        else if (!this.triggerSchema.equals(other.triggerSchema))
            return false;
        if (this.triggerName == null) {
            if (other.triggerName != null)
                return false;
        }
        else if (!this.triggerName.equals(other.triggerName))
            return false;
        if (this.eventManipulation == null) {
            if (other.eventManipulation != null)
                return false;
        }
        else if (!this.eventManipulation.equals(other.eventManipulation))
            return false;
        if (this.eventObjectCatalog == null) {
            if (other.eventObjectCatalog != null)
                return false;
        }
        else if (!this.eventObjectCatalog.equals(other.eventObjectCatalog))
            return false;
        if (this.eventObjectSchema == null) {
            if (other.eventObjectSchema != null)
                return false;
        }
        else if (!this.eventObjectSchema.equals(other.eventObjectSchema))
            return false;
        if (this.eventObjectTable == null) {
            if (other.eventObjectTable != null)
                return false;
        }
        else if (!this.eventObjectTable.equals(other.eventObjectTable))
            return false;
        if (this.actionOrientation == null) {
            if (other.actionOrientation != null)
                return false;
        }
        else if (!this.actionOrientation.equals(other.actionOrientation))
            return false;
        if (this.actionTiming == null) {
            if (other.actionTiming != null)
                return false;
        }
        else if (!this.actionTiming.equals(other.actionTiming))
            return false;
        if (this.isRollback == null) {
            if (other.isRollback != null)
                return false;
        }
        else if (!this.isRollback.equals(other.isRollback))
            return false;
        if (this.javaClass == null) {
            if (other.javaClass != null)
                return false;
        }
        else if (!this.javaClass.equals(other.javaClass))
            return false;
        if (this.queueSize == null) {
            if (other.queueSize != null)
                return false;
        }
        else if (!this.queueSize.equals(other.queueSize))
            return false;
        if (this.noWait == null) {
            if (other.noWait != null)
                return false;
        }
        else if (!this.noWait.equals(other.noWait))
            return false;
        if (this.remarks == null) {
            if (other.remarks != null)
                return false;
        }
        else if (!this.remarks.equals(other.remarks))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.triggerCatalog == null) ? 0 : this.triggerCatalog.hashCode());
        result = prime * result + ((this.triggerSchema == null) ? 0 : this.triggerSchema.hashCode());
        result = prime * result + ((this.triggerName == null) ? 0 : this.triggerName.hashCode());
        result = prime * result + ((this.eventManipulation == null) ? 0 : this.eventManipulation.hashCode());
        result = prime * result + ((this.eventObjectCatalog == null) ? 0 : this.eventObjectCatalog.hashCode());
        result = prime * result + ((this.eventObjectSchema == null) ? 0 : this.eventObjectSchema.hashCode());
        result = prime * result + ((this.eventObjectTable == null) ? 0 : this.eventObjectTable.hashCode());
        result = prime * result + ((this.actionOrientation == null) ? 0 : this.actionOrientation.hashCode());
        result = prime * result + ((this.actionTiming == null) ? 0 : this.actionTiming.hashCode());
        result = prime * result + ((this.isRollback == null) ? 0 : this.isRollback.hashCode());
        result = prime * result + ((this.javaClass == null) ? 0 : this.javaClass.hashCode());
        result = prime * result + ((this.queueSize == null) ? 0 : this.queueSize.hashCode());
        result = prime * result + ((this.noWait == null) ? 0 : this.noWait.hashCode());
        result = prime * result + ((this.remarks == null) ? 0 : this.remarks.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Triggers (");

        sb.append(triggerCatalog);
        sb.append(", ").append(triggerSchema);
        sb.append(", ").append(triggerName);
        sb.append(", ").append(eventManipulation);
        sb.append(", ").append(eventObjectCatalog);
        sb.append(", ").append(eventObjectSchema);
        sb.append(", ").append(eventObjectTable);
        sb.append(", ").append(actionOrientation);
        sb.append(", ").append(actionTiming);
        sb.append(", ").append(isRollback);
        sb.append(", ").append(javaClass);
        sb.append(", ").append(queueSize);
        sb.append(", ").append(noWait);
        sb.append(", ").append(remarks);

        sb.append(")");
        return sb.toString();
    }
}
