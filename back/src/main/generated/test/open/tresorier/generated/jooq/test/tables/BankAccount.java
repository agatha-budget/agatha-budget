/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import open.tresorier.generated.jooq.test.Keys;
import open.tresorier.generated.jooq.test.Public;
import open.tresorier.generated.jooq.test.tables.Account.AccountPath;
import open.tresorier.generated.jooq.test.tables.BankAgreement.BankAgreementPath;
import open.tresorier.generated.jooq.test.tables.records.BankAccountRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankAccount extends TableImpl<BankAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bank_account</code>
     */
    public static final BankAccount BANK_ACCOUNT = new BankAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankAccountRecord> getRecordType() {
        return BankAccountRecord.class;
    }

    /**
     * The column <code>public.bank_account.id</code>.
     */
    public final TableField<BankAccountRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bank_account.name</code>.
     */
    public final TableField<BankAccountRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.bank_account.agreement_id</code>.
     */
    public final TableField<BankAccountRecord, String> AGREEMENT_ID = createField(DSL.name("agreement_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bank_account.deleted</code>.
     */
    public final TableField<BankAccountRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.bank_account.bank_id</code>.
     */
    public final TableField<BankAccountRecord, String> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.VARCHAR(36).nullable(false).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "");

    private BankAccount(Name alias, Table<BankAccountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BankAccount(Name alias, Table<BankAccountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.bank_account</code> table reference
     */
    public BankAccount(String alias) {
        this(DSL.name(alias), BANK_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.bank_account</code> table reference
     */
    public BankAccount(Name alias) {
        this(alias, BANK_ACCOUNT);
    }

    /**
     * Create a <code>public.bank_account</code> table reference
     */
    public BankAccount() {
        this(DSL.name("bank_account"), null);
    }

    public <O extends Record> BankAccount(Table<O> path, ForeignKey<O, BankAccountRecord> childPath, InverseForeignKey<O, BankAccountRecord> parentPath) {
        super(path, childPath, parentPath, BANK_ACCOUNT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BankAccountPath extends BankAccount implements Path<BankAccountRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BankAccountPath(Table<O> path, ForeignKey<O, BankAccountRecord> childPath, InverseForeignKey<O, BankAccountRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BankAccountPath(Name alias, Table<BankAccountRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BankAccountPath as(String alias) {
            return new BankAccountPath(DSL.name(alias), this);
        }

        @Override
        public BankAccountPath as(Name alias) {
            return new BankAccountPath(alias, this);
        }

        @Override
        public BankAccountPath as(Table<?> alias) {
            return new BankAccountPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BankAccountRecord> getPrimaryKey() {
        return Keys.BANK_ACCOUNT_PKEY;
    }

    @Override
    public List<ForeignKey<BankAccountRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BANK_ACCOUNT__BANK_ACCOUNT_AGREEMENT_ID_FKEY);
    }

    private transient BankAgreementPath _bankAgreement;

    /**
     * Get the implicit join path to the <code>public.bank_agreement</code>
     * table.
     */
    public BankAgreementPath bankAgreement() {
        if (_bankAgreement == null)
            _bankAgreement = new BankAgreementPath(this, Keys.BANK_ACCOUNT__BANK_ACCOUNT_AGREEMENT_ID_FKEY, null);

        return _bankAgreement;
    }

    private transient AccountPath _account;

    /**
     * Get the implicit to-many join path to the <code>public.account</code>
     * table
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, null, Keys.ACCOUNT__ACCOUNT_BANK_ACCOUNT_ID_FKEY.getInverseKey());

        return _account;
    }

    @Override
    public BankAccount as(String alias) {
        return new BankAccount(DSL.name(alias), this);
    }

    @Override
    public BankAccount as(Name alias) {
        return new BankAccount(alias, this);
    }

    @Override
    public BankAccount as(Table<?> alias) {
        return new BankAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccount rename(String name) {
        return new BankAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccount rename(Name name) {
        return new BankAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccount rename(Table<?> name) {
        return new BankAccount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccount where(Condition condition) {
        return new BankAccount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
