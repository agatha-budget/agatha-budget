/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tables implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String tableCatalog;
    private final String tableSchema;
    private final String tableName;
    private final String tableType;
    private final String isInsertableInto;
    private final String commitAction;
    private final String storageType;
    private final String remarks;
    private final Long lastModification;
    private final String tableClass;
    private final Long rowCountEstimate;

    public Tables(Tables value) {
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.tableType = value.tableType;
        this.isInsertableInto = value.isInsertableInto;
        this.commitAction = value.commitAction;
        this.storageType = value.storageType;
        this.remarks = value.remarks;
        this.lastModification = value.lastModification;
        this.tableClass = value.tableClass;
        this.rowCountEstimate = value.rowCountEstimate;
    }

    public Tables(
        String tableCatalog,
        String tableSchema,
        String tableName,
        String tableType,
        String isInsertableInto,
        String commitAction,
        String storageType,
        String remarks,
        Long lastModification,
        String tableClass,
        Long rowCountEstimate
    ) {
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.tableType = tableType;
        this.isInsertableInto = isInsertableInto;
        this.commitAction = commitAction;
        this.storageType = storageType;
        this.remarks = remarks;
        this.lastModification = lastModification;
        this.tableClass = tableClass;
        this.rowCountEstimate = rowCountEstimate;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return this.tableSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.TABLE_NAME</code>.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.TABLE_TYPE</code>.
     */
    public String getTableType() {
        return this.tableType;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.IS_INSERTABLE_INTO</code>.
     */
    public String getIsInsertableInto() {
        return this.isInsertableInto;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.COMMIT_ACTION</code>.
     */
    public String getCommitAction() {
        return this.commitAction;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.STORAGE_TYPE</code>.
     */
    public String getStorageType() {
        return this.storageType;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.REMARKS</code>.
     */
    public String getRemarks() {
        return this.remarks;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.LAST_MODIFICATION</code>.
     */
    public Long getLastModification() {
        return this.lastModification;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.TABLE_CLASS</code>.
     */
    public String getTableClass() {
        return this.tableClass;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.TABLES.ROW_COUNT_ESTIMATE</code>.
     */
    public Long getRowCountEstimate() {
        return this.rowCountEstimate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Tables other = (Tables) obj;
        if (this.tableCatalog == null) {
            if (other.tableCatalog != null)
                return false;
        }
        else if (!this.tableCatalog.equals(other.tableCatalog))
            return false;
        if (this.tableSchema == null) {
            if (other.tableSchema != null)
                return false;
        }
        else if (!this.tableSchema.equals(other.tableSchema))
            return false;
        if (this.tableName == null) {
            if (other.tableName != null)
                return false;
        }
        else if (!this.tableName.equals(other.tableName))
            return false;
        if (this.tableType == null) {
            if (other.tableType != null)
                return false;
        }
        else if (!this.tableType.equals(other.tableType))
            return false;
        if (this.isInsertableInto == null) {
            if (other.isInsertableInto != null)
                return false;
        }
        else if (!this.isInsertableInto.equals(other.isInsertableInto))
            return false;
        if (this.commitAction == null) {
            if (other.commitAction != null)
                return false;
        }
        else if (!this.commitAction.equals(other.commitAction))
            return false;
        if (this.storageType == null) {
            if (other.storageType != null)
                return false;
        }
        else if (!this.storageType.equals(other.storageType))
            return false;
        if (this.remarks == null) {
            if (other.remarks != null)
                return false;
        }
        else if (!this.remarks.equals(other.remarks))
            return false;
        if (this.lastModification == null) {
            if (other.lastModification != null)
                return false;
        }
        else if (!this.lastModification.equals(other.lastModification))
            return false;
        if (this.tableClass == null) {
            if (other.tableClass != null)
                return false;
        }
        else if (!this.tableClass.equals(other.tableClass))
            return false;
        if (this.rowCountEstimate == null) {
            if (other.rowCountEstimate != null)
                return false;
        }
        else if (!this.rowCountEstimate.equals(other.rowCountEstimate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.tableCatalog == null) ? 0 : this.tableCatalog.hashCode());
        result = prime * result + ((this.tableSchema == null) ? 0 : this.tableSchema.hashCode());
        result = prime * result + ((this.tableName == null) ? 0 : this.tableName.hashCode());
        result = prime * result + ((this.tableType == null) ? 0 : this.tableType.hashCode());
        result = prime * result + ((this.isInsertableInto == null) ? 0 : this.isInsertableInto.hashCode());
        result = prime * result + ((this.commitAction == null) ? 0 : this.commitAction.hashCode());
        result = prime * result + ((this.storageType == null) ? 0 : this.storageType.hashCode());
        result = prime * result + ((this.remarks == null) ? 0 : this.remarks.hashCode());
        result = prime * result + ((this.lastModification == null) ? 0 : this.lastModification.hashCode());
        result = prime * result + ((this.tableClass == null) ? 0 : this.tableClass.hashCode());
        result = prime * result + ((this.rowCountEstimate == null) ? 0 : this.rowCountEstimate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Tables (");

        sb.append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(tableType);
        sb.append(", ").append(isInsertableInto);
        sb.append(", ").append(commitAction);
        sb.append(", ").append(storageType);
        sb.append(", ").append(remarks);
        sb.append(", ").append(lastModification);
        sb.append(", ").append(tableClass);
        sb.append(", ").append(rowCountEstimate);

        sb.append(")");
        return sb.toString();
    }
}
