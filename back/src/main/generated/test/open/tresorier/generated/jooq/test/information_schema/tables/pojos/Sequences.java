/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sequences implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String sequenceCatalog;
    private final String sequenceSchema;
    private final String sequenceName;
    private final String dataType;
    private final Integer numericPrecision;
    private final Integer numericPrecisionRadix;
    private final Integer numericScale;
    private final Long startValue;
    private final Long minimumValue;
    private final Long maximumValue;
    private final Long increment;
    private final String cycleOption;
    private final String declaredDataType;
    private final Integer declaredNumericPrecision;
    private final Integer declaredNumericScale;
    private final Long baseValue;
    private final Long cache;
    private final String remarks;

    public Sequences(Sequences value) {
        this.sequenceCatalog = value.sequenceCatalog;
        this.sequenceSchema = value.sequenceSchema;
        this.sequenceName = value.sequenceName;
        this.dataType = value.dataType;
        this.numericPrecision = value.numericPrecision;
        this.numericPrecisionRadix = value.numericPrecisionRadix;
        this.numericScale = value.numericScale;
        this.startValue = value.startValue;
        this.minimumValue = value.minimumValue;
        this.maximumValue = value.maximumValue;
        this.increment = value.increment;
        this.cycleOption = value.cycleOption;
        this.declaredDataType = value.declaredDataType;
        this.declaredNumericPrecision = value.declaredNumericPrecision;
        this.declaredNumericScale = value.declaredNumericScale;
        this.baseValue = value.baseValue;
        this.cache = value.cache;
        this.remarks = value.remarks;
    }

    public Sequences(
        String sequenceCatalog,
        String sequenceSchema,
        String sequenceName,
        String dataType,
        Integer numericPrecision,
        Integer numericPrecisionRadix,
        Integer numericScale,
        Long startValue,
        Long minimumValue,
        Long maximumValue,
        Long increment,
        String cycleOption,
        String declaredDataType,
        Integer declaredNumericPrecision,
        Integer declaredNumericScale,
        Long baseValue,
        Long cache,
        String remarks
    ) {
        this.sequenceCatalog = sequenceCatalog;
        this.sequenceSchema = sequenceSchema;
        this.sequenceName = sequenceName;
        this.dataType = dataType;
        this.numericPrecision = numericPrecision;
        this.numericPrecisionRadix = numericPrecisionRadix;
        this.numericScale = numericScale;
        this.startValue = startValue;
        this.minimumValue = minimumValue;
        this.maximumValue = maximumValue;
        this.increment = increment;
        this.cycleOption = cycleOption;
        this.declaredDataType = declaredDataType;
        this.declaredNumericPrecision = declaredNumericPrecision;
        this.declaredNumericScale = declaredNumericScale;
        this.baseValue = baseValue;
        this.cache = cache;
        this.remarks = remarks;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_CATALOG</code>.
     */
    public String getSequenceCatalog() {
        return this.sequenceCatalog;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_SCHEMA</code>.
     */
    public String getSequenceSchema() {
        return this.sequenceSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_NAME</code>.
     */
    public String getSequenceName() {
        return this.sequenceName;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.DATA_TYPE</code>.
     */
    public String getDataType() {
        return this.dataType;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_PRECISION</code>.
     */
    public Integer getNumericPrecision() {
        return this.numericPrecision;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_PRECISION_RADIX</code>.
     */
    public Integer getNumericPrecisionRadix() {
        return this.numericPrecisionRadix;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_SCALE</code>.
     */
    public Integer getNumericScale() {
        return this.numericScale;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.START_VALUE</code>.
     */
    public Long getStartValue() {
        return this.startValue;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.MINIMUM_VALUE</code>.
     */
    public Long getMinimumValue() {
        return this.minimumValue;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.MAXIMUM_VALUE</code>.
     */
    public Long getMaximumValue() {
        return this.maximumValue;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.INCREMENT</code>.
     */
    public Long getIncrement() {
        return this.increment;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.CYCLE_OPTION</code>.
     */
    public String getCycleOption() {
        return this.cycleOption;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_DATA_TYPE</code>.
     */
    public String getDeclaredDataType() {
        return this.declaredDataType;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_NUMERIC_PRECISION</code>.
     */
    public Integer getDeclaredNumericPrecision() {
        return this.declaredNumericPrecision;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_NUMERIC_SCALE</code>.
     */
    public Integer getDeclaredNumericScale() {
        return this.declaredNumericScale;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.BASE_VALUE</code>.
     */
    public Long getBaseValue() {
        return this.baseValue;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.CACHE</code>.
     */
    public Long getCache() {
        return this.cache;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.REMARKS</code>.
     */
    public String getRemarks() {
        return this.remarks;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Sequences other = (Sequences) obj;
        if (this.sequenceCatalog == null) {
            if (other.sequenceCatalog != null)
                return false;
        }
        else if (!this.sequenceCatalog.equals(other.sequenceCatalog))
            return false;
        if (this.sequenceSchema == null) {
            if (other.sequenceSchema != null)
                return false;
        }
        else if (!this.sequenceSchema.equals(other.sequenceSchema))
            return false;
        if (this.sequenceName == null) {
            if (other.sequenceName != null)
                return false;
        }
        else if (!this.sequenceName.equals(other.sequenceName))
            return false;
        if (this.dataType == null) {
            if (other.dataType != null)
                return false;
        }
        else if (!this.dataType.equals(other.dataType))
            return false;
        if (this.numericPrecision == null) {
            if (other.numericPrecision != null)
                return false;
        }
        else if (!this.numericPrecision.equals(other.numericPrecision))
            return false;
        if (this.numericPrecisionRadix == null) {
            if (other.numericPrecisionRadix != null)
                return false;
        }
        else if (!this.numericPrecisionRadix.equals(other.numericPrecisionRadix))
            return false;
        if (this.numericScale == null) {
            if (other.numericScale != null)
                return false;
        }
        else if (!this.numericScale.equals(other.numericScale))
            return false;
        if (this.startValue == null) {
            if (other.startValue != null)
                return false;
        }
        else if (!this.startValue.equals(other.startValue))
            return false;
        if (this.minimumValue == null) {
            if (other.minimumValue != null)
                return false;
        }
        else if (!this.minimumValue.equals(other.minimumValue))
            return false;
        if (this.maximumValue == null) {
            if (other.maximumValue != null)
                return false;
        }
        else if (!this.maximumValue.equals(other.maximumValue))
            return false;
        if (this.increment == null) {
            if (other.increment != null)
                return false;
        }
        else if (!this.increment.equals(other.increment))
            return false;
        if (this.cycleOption == null) {
            if (other.cycleOption != null)
                return false;
        }
        else if (!this.cycleOption.equals(other.cycleOption))
            return false;
        if (this.declaredDataType == null) {
            if (other.declaredDataType != null)
                return false;
        }
        else if (!this.declaredDataType.equals(other.declaredDataType))
            return false;
        if (this.declaredNumericPrecision == null) {
            if (other.declaredNumericPrecision != null)
                return false;
        }
        else if (!this.declaredNumericPrecision.equals(other.declaredNumericPrecision))
            return false;
        if (this.declaredNumericScale == null) {
            if (other.declaredNumericScale != null)
                return false;
        }
        else if (!this.declaredNumericScale.equals(other.declaredNumericScale))
            return false;
        if (this.baseValue == null) {
            if (other.baseValue != null)
                return false;
        }
        else if (!this.baseValue.equals(other.baseValue))
            return false;
        if (this.cache == null) {
            if (other.cache != null)
                return false;
        }
        else if (!this.cache.equals(other.cache))
            return false;
        if (this.remarks == null) {
            if (other.remarks != null)
                return false;
        }
        else if (!this.remarks.equals(other.remarks))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.sequenceCatalog == null) ? 0 : this.sequenceCatalog.hashCode());
        result = prime * result + ((this.sequenceSchema == null) ? 0 : this.sequenceSchema.hashCode());
        result = prime * result + ((this.sequenceName == null) ? 0 : this.sequenceName.hashCode());
        result = prime * result + ((this.dataType == null) ? 0 : this.dataType.hashCode());
        result = prime * result + ((this.numericPrecision == null) ? 0 : this.numericPrecision.hashCode());
        result = prime * result + ((this.numericPrecisionRadix == null) ? 0 : this.numericPrecisionRadix.hashCode());
        result = prime * result + ((this.numericScale == null) ? 0 : this.numericScale.hashCode());
        result = prime * result + ((this.startValue == null) ? 0 : this.startValue.hashCode());
        result = prime * result + ((this.minimumValue == null) ? 0 : this.minimumValue.hashCode());
        result = prime * result + ((this.maximumValue == null) ? 0 : this.maximumValue.hashCode());
        result = prime * result + ((this.increment == null) ? 0 : this.increment.hashCode());
        result = prime * result + ((this.cycleOption == null) ? 0 : this.cycleOption.hashCode());
        result = prime * result + ((this.declaredDataType == null) ? 0 : this.declaredDataType.hashCode());
        result = prime * result + ((this.declaredNumericPrecision == null) ? 0 : this.declaredNumericPrecision.hashCode());
        result = prime * result + ((this.declaredNumericScale == null) ? 0 : this.declaredNumericScale.hashCode());
        result = prime * result + ((this.baseValue == null) ? 0 : this.baseValue.hashCode());
        result = prime * result + ((this.cache == null) ? 0 : this.cache.hashCode());
        result = prime * result + ((this.remarks == null) ? 0 : this.remarks.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Sequences (");

        sb.append(sequenceCatalog);
        sb.append(", ").append(sequenceSchema);
        sb.append(", ").append(sequenceName);
        sb.append(", ").append(dataType);
        sb.append(", ").append(numericPrecision);
        sb.append(", ").append(numericPrecisionRadix);
        sb.append(", ").append(numericScale);
        sb.append(", ").append(startValue);
        sb.append(", ").append(minimumValue);
        sb.append(", ").append(maximumValue);
        sb.append(", ").append(increment);
        sb.append(", ").append(cycleOption);
        sb.append(", ").append(declaredDataType);
        sb.append(", ").append(declaredNumericPrecision);
        sb.append(", ").append(declaredNumericScale);
        sb.append(", ").append(baseValue);
        sb.append(", ").append(cache);
        sb.append(", ").append(remarks);

        sb.append(")");
        return sb.toString();
    }
}
