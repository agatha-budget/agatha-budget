/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.public_;


import open.tresorier.generated.jooq.test.public_.tables.Account;
import open.tresorier.generated.jooq.test.public_.tables.Allocation;
import open.tresorier.generated.jooq.test.public_.tables.BankAccount;
import open.tresorier.generated.jooq.test.public_.tables.BankAgreement;
import open.tresorier.generated.jooq.test.public_.tables.Budget;
import open.tresorier.generated.jooq.test.public_.tables.Category;
import open.tresorier.generated.jooq.test.public_.tables.FlywaySchemaHistory;
import open.tresorier.generated.jooq.test.public_.tables.MasterCategory;
import open.tresorier.generated.jooq.test.public_.tables.Operation;
import open.tresorier.generated.jooq.test.public_.tables.Person;
import open.tresorier.generated.jooq.test.public_.tables.UserActivity;
import open.tresorier.generated.jooq.test.public_.tables.records.AccountRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.AllocationRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.BankAccountRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.BankAgreementRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.BudgetRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.CategoryRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.FlywaySchemaHistoryRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.MasterCategoryRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.OperationRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.PersonRecord;
import open.tresorier.generated.jooq.test.public_.tables.records.UserActivityRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * PUBLIC.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> CONSTRAINT_E = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("CONSTRAINT_E"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AllocationRecord> COMPOSITE_ID = Internal.createUniqueKey(Allocation.ALLOCATION, DSL.name("COMPOSITE_ID"), new TableField[] { Allocation.ALLOCATION.CATEGORY_ID, Allocation.ALLOCATION.DATE_MONTH }, true);
    public static final UniqueKey<BankAccountRecord> CONSTRAINT_1 = Internal.createUniqueKey(BankAccount.BANK_ACCOUNT, DSL.name("CONSTRAINT_1"), new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final UniqueKey<BankAgreementRecord> CONSTRAINT_4 = Internal.createUniqueKey(BankAgreement.BANK_AGREEMENT, DSL.name("CONSTRAINT_4"), new TableField[] { BankAgreement.BANK_AGREEMENT.ID }, true);
    public static final UniqueKey<BudgetRecord> CONSTRAINT_7 = Internal.createUniqueKey(Budget.BUDGET, DSL.name("CONSTRAINT_7"), new TableField[] { Budget.BUDGET.ID }, true);
    public static final UniqueKey<CategoryRecord> CONSTRAINT_3 = Internal.createUniqueKey(Category.CATEGORY, DSL.name("CONSTRAINT_3"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<MasterCategoryRecord> CONSTRAINT_D = Internal.createUniqueKey(MasterCategory.MASTER_CATEGORY, DSL.name("CONSTRAINT_D"), new TableField[] { MasterCategory.MASTER_CATEGORY.ID }, true);
    public static final UniqueKey<OperationRecord> CONSTRAINT_9 = Internal.createUniqueKey(Operation.OPERATION, DSL.name("CONSTRAINT_9"), new TableField[] { Operation.OPERATION.ID }, true);
    public static final UniqueKey<OperationRecord> CONSTRAINT_932E = Internal.createUniqueKey(Operation.OPERATION, DSL.name("CONSTRAINT_932E"), new TableField[] { Operation.OPERATION.IMPORT_IDENTIFIER }, true);
    public static final UniqueKey<PersonRecord> CONSTRAINT_8 = Internal.createUniqueKey(Person.PERSON, DSL.name("CONSTRAINT_8"), new TableField[] { Person.PERSON.ID }, true);
    public static final UniqueKey<PersonRecord> CONSTRAINT_8C = Internal.createUniqueKey(Person.PERSON, DSL.name("CONSTRAINT_8C"), new TableField[] { Person.PERSON.EMAIL }, true);
    public static final UniqueKey<PersonRecord> CONSTRAINT_8C7 = Internal.createUniqueKey(Person.PERSON, DSL.name("CONSTRAINT_8C7"), new TableField[] { Person.PERSON.BILLING_ID }, true);
    public static final UniqueKey<UserActivityRecord> CONSTRAINT_E2 = Internal.createUniqueKey(UserActivity.USER_ACTIVITY, DSL.name("CONSTRAINT_E2"), new TableField[] { UserActivity.USER_ACTIVITY.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, BudgetRecord> CONSTRAINT_E4 = Internal.createForeignKey(Account.ACCOUNT, DSL.name("CONSTRAINT_E4"), new TableField[] { Account.ACCOUNT.BUDGET_ID }, Keys.CONSTRAINT_7, new TableField[] { Budget.BUDGET.ID }, true);
    public static final ForeignKey<AccountRecord, BankAccountRecord> CONSTRAINT_E49 = Internal.createForeignKey(Account.ACCOUNT, DSL.name("CONSTRAINT_E49"), new TableField[] { Account.ACCOUNT.BANK_ACCOUNT_ID }, Keys.CONSTRAINT_1, new TableField[] { BankAccount.BANK_ACCOUNT.ID }, true);
    public static final ForeignKey<AllocationRecord, CategoryRecord> CONSTRAINT_A = Internal.createForeignKey(Allocation.ALLOCATION, DSL.name("CONSTRAINT_A"), new TableField[] { Allocation.ALLOCATION.CATEGORY_ID }, Keys.CONSTRAINT_3, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<BankAccountRecord, BankAgreementRecord> CONSTRAINT_19 = Internal.createForeignKey(BankAccount.BANK_ACCOUNT, DSL.name("CONSTRAINT_19"), new TableField[] { BankAccount.BANK_ACCOUNT.AGREEMENT_ID }, Keys.CONSTRAINT_4, new TableField[] { BankAgreement.BANK_AGREEMENT.ID }, true);
    public static final ForeignKey<BankAgreementRecord, BudgetRecord> CONSTRAINT_49 = Internal.createForeignKey(BankAgreement.BANK_AGREEMENT, DSL.name("CONSTRAINT_49"), new TableField[] { BankAgreement.BANK_AGREEMENT.BUDGET_ID }, Keys.CONSTRAINT_7, new TableField[] { Budget.BUDGET.ID }, true);
    public static final ForeignKey<BudgetRecord, PersonRecord> CONSTRAINT_75 = Internal.createForeignKey(Budget.BUDGET, DSL.name("CONSTRAINT_75"), new TableField[] { Budget.BUDGET.PERSON_ID }, Keys.CONSTRAINT_8, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<CategoryRecord, MasterCategoryRecord> CONSTRAINT_31 = Internal.createForeignKey(Category.CATEGORY, DSL.name("CONSTRAINT_31"), new TableField[] { Category.CATEGORY.MASTER_CATEGORY_ID }, Keys.CONSTRAINT_D, new TableField[] { MasterCategory.MASTER_CATEGORY.ID }, true);
    public static final ForeignKey<MasterCategoryRecord, BudgetRecord> CONSTRAINT_D3 = Internal.createForeignKey(MasterCategory.MASTER_CATEGORY, DSL.name("CONSTRAINT_D3"), new TableField[] { MasterCategory.MASTER_CATEGORY.BUDGET_ID }, Keys.CONSTRAINT_7, new TableField[] { Budget.BUDGET.ID }, true);
    public static final ForeignKey<OperationRecord, AccountRecord> CONSTRAINT_93 = Internal.createForeignKey(Operation.OPERATION, DSL.name("CONSTRAINT_93"), new TableField[] { Operation.OPERATION.ACCOUNT_ID }, Keys.CONSTRAINT_E, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<OperationRecord, CategoryRecord> CONSTRAINT_932 = Internal.createForeignKey(Operation.OPERATION, DSL.name("CONSTRAINT_932"), new TableField[] { Operation.OPERATION.CATEGORY_ID }, Keys.CONSTRAINT_3, new TableField[] { Category.CATEGORY.ID }, true);
}
