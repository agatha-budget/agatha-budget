/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Views implements Serializable {

    private static final long serialVersionUID = 1L;

    private final String tableCatalog;
    private final String tableSchema;
    private final String tableName;
    private final String viewDefinition;
    private final String checkOption;
    private final String isUpdatable;
    private final String insertableInto;
    private final String isTriggerUpdatable;
    private final String isTriggerDeletable;
    private final String isTriggerInsertableInto;
    private final String status;
    private final String remarks;

    public Views(Views value) {
        this.tableCatalog = value.tableCatalog;
        this.tableSchema = value.tableSchema;
        this.tableName = value.tableName;
        this.viewDefinition = value.viewDefinition;
        this.checkOption = value.checkOption;
        this.isUpdatable = value.isUpdatable;
        this.insertableInto = value.insertableInto;
        this.isTriggerUpdatable = value.isTriggerUpdatable;
        this.isTriggerDeletable = value.isTriggerDeletable;
        this.isTriggerInsertableInto = value.isTriggerInsertableInto;
        this.status = value.status;
        this.remarks = value.remarks;
    }

    public Views(
        String tableCatalog,
        String tableSchema,
        String tableName,
        String viewDefinition,
        String checkOption,
        String isUpdatable,
        String insertableInto,
        String isTriggerUpdatable,
        String isTriggerDeletable,
        String isTriggerInsertableInto,
        String status,
        String remarks
    ) {
        this.tableCatalog = tableCatalog;
        this.tableSchema = tableSchema;
        this.tableName = tableName;
        this.viewDefinition = viewDefinition;
        this.checkOption = checkOption;
        this.isUpdatable = isUpdatable;
        this.insertableInto = insertableInto;
        this.isTriggerUpdatable = isTriggerUpdatable;
        this.isTriggerDeletable = isTriggerDeletable;
        this.isTriggerInsertableInto = isTriggerInsertableInto;
        this.status = status;
        this.remarks = remarks;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return this.tableCatalog;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return this.tableSchema;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_NAME</code>.
     */
    public String getTableName() {
        return this.tableName;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.VIEW_DEFINITION</code>.
     */
    public String getViewDefinition() {
        return this.viewDefinition;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.CHECK_OPTION</code>.
     */
    public String getCheckOption() {
        return this.checkOption;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.IS_UPDATABLE</code>.
     */
    public String getIsUpdatable() {
        return this.isUpdatable;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.INSERTABLE_INTO</code>.
     */
    public String getInsertableInto() {
        return this.insertableInto;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_UPDATABLE</code>.
     */
    public String getIsTriggerUpdatable() {
        return this.isTriggerUpdatable;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_DELETABLE</code>.
     */
    public String getIsTriggerDeletable() {
        return this.isTriggerDeletable;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_INSERTABLE_INTO</code>.
     */
    public String getIsTriggerInsertableInto() {
        return this.isTriggerInsertableInto;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.STATUS</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.REMARKS</code>.
     */
    public String getRemarks() {
        return this.remarks;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Views other = (Views) obj;
        if (this.tableCatalog == null) {
            if (other.tableCatalog != null)
                return false;
        }
        else if (!this.tableCatalog.equals(other.tableCatalog))
            return false;
        if (this.tableSchema == null) {
            if (other.tableSchema != null)
                return false;
        }
        else if (!this.tableSchema.equals(other.tableSchema))
            return false;
        if (this.tableName == null) {
            if (other.tableName != null)
                return false;
        }
        else if (!this.tableName.equals(other.tableName))
            return false;
        if (this.viewDefinition == null) {
            if (other.viewDefinition != null)
                return false;
        }
        else if (!this.viewDefinition.equals(other.viewDefinition))
            return false;
        if (this.checkOption == null) {
            if (other.checkOption != null)
                return false;
        }
        else if (!this.checkOption.equals(other.checkOption))
            return false;
        if (this.isUpdatable == null) {
            if (other.isUpdatable != null)
                return false;
        }
        else if (!this.isUpdatable.equals(other.isUpdatable))
            return false;
        if (this.insertableInto == null) {
            if (other.insertableInto != null)
                return false;
        }
        else if (!this.insertableInto.equals(other.insertableInto))
            return false;
        if (this.isTriggerUpdatable == null) {
            if (other.isTriggerUpdatable != null)
                return false;
        }
        else if (!this.isTriggerUpdatable.equals(other.isTriggerUpdatable))
            return false;
        if (this.isTriggerDeletable == null) {
            if (other.isTriggerDeletable != null)
                return false;
        }
        else if (!this.isTriggerDeletable.equals(other.isTriggerDeletable))
            return false;
        if (this.isTriggerInsertableInto == null) {
            if (other.isTriggerInsertableInto != null)
                return false;
        }
        else if (!this.isTriggerInsertableInto.equals(other.isTriggerInsertableInto))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.remarks == null) {
            if (other.remarks != null)
                return false;
        }
        else if (!this.remarks.equals(other.remarks))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.tableCatalog == null) ? 0 : this.tableCatalog.hashCode());
        result = prime * result + ((this.tableSchema == null) ? 0 : this.tableSchema.hashCode());
        result = prime * result + ((this.tableName == null) ? 0 : this.tableName.hashCode());
        result = prime * result + ((this.viewDefinition == null) ? 0 : this.viewDefinition.hashCode());
        result = prime * result + ((this.checkOption == null) ? 0 : this.checkOption.hashCode());
        result = prime * result + ((this.isUpdatable == null) ? 0 : this.isUpdatable.hashCode());
        result = prime * result + ((this.insertableInto == null) ? 0 : this.insertableInto.hashCode());
        result = prime * result + ((this.isTriggerUpdatable == null) ? 0 : this.isTriggerUpdatable.hashCode());
        result = prime * result + ((this.isTriggerDeletable == null) ? 0 : this.isTriggerDeletable.hashCode());
        result = prime * result + ((this.isTriggerInsertableInto == null) ? 0 : this.isTriggerInsertableInto.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.remarks == null) ? 0 : this.remarks.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Views (");

        sb.append(tableCatalog);
        sb.append(", ").append(tableSchema);
        sb.append(", ").append(tableName);
        sb.append(", ").append(viewDefinition);
        sb.append(", ").append(checkOption);
        sb.append(", ").append(isUpdatable);
        sb.append(", ").append(insertableInto);
        sb.append(", ").append(isTriggerUpdatable);
        sb.append(", ").append(isTriggerDeletable);
        sb.append(", ").append(isTriggerInsertableInto);
        sb.append(", ").append(status);
        sb.append(", ").append(remarks);

        sb.append(")");
        return sb.toString();
    }
}
