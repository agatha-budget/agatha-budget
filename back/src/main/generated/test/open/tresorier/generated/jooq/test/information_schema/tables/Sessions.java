/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import open.tresorier.generated.jooq.test.information_schema.InformationSchema;
import open.tresorier.generated.jooq.test.information_schema.tables.records.SessionsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sessions extends TableImpl<SessionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.SESSIONS</code>
     */
    public static final Sessions SESSIONS = new Sessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SessionsRecord> getRecordType() {
        return SessionsRecord.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.SESSION_ID</code>.
     */
    public final TableField<SessionsRecord, Integer> SESSION_ID = createField(DSL.name("SESSION_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.USER_NAME</code>.
     */
    public final TableField<SessionsRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.SERVER</code>.
     */
    public final TableField<SessionsRecord, String> SERVER = createField(DSL.name("SERVER"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.CLIENT_ADDR</code>.
     */
    public final TableField<SessionsRecord, String> CLIENT_ADDR = createField(DSL.name("CLIENT_ADDR"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.CLIENT_INFO</code>.
     */
    public final TableField<SessionsRecord, String> CLIENT_INFO = createField(DSL.name("CLIENT_INFO"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.SESSION_START</code>.
     */
    public final TableField<SessionsRecord, OffsetDateTime> SESSION_START = createField(DSL.name("SESSION_START"), SQLDataType.TIMESTAMPWITHTIMEZONE(9), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.ISOLATION_LEVEL</code>.
     */
    public final TableField<SessionsRecord, String> ISOLATION_LEVEL = createField(DSL.name("ISOLATION_LEVEL"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.EXECUTING_STATEMENT</code>.
     */
    public final TableField<SessionsRecord, String> EXECUTING_STATEMENT = createField(DSL.name("EXECUTING_STATEMENT"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column
     * <code>INFORMATION_SCHEMA.SESSIONS.EXECUTING_STATEMENT_START</code>.
     */
    public final TableField<SessionsRecord, OffsetDateTime> EXECUTING_STATEMENT_START = createField(DSL.name("EXECUTING_STATEMENT_START"), SQLDataType.TIMESTAMPWITHTIMEZONE(9), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.CONTAINS_UNCOMMITTED</code>.
     */
    public final TableField<SessionsRecord, Boolean> CONTAINS_UNCOMMITTED = createField(DSL.name("CONTAINS_UNCOMMITTED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.SESSION_STATE</code>.
     */
    public final TableField<SessionsRecord, String> SESSION_STATE = createField(DSL.name("SESSION_STATE"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.BLOCKER_ID</code>.
     */
    public final TableField<SessionsRecord, Integer> BLOCKER_ID = createField(DSL.name("BLOCKER_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.SESSIONS.SLEEP_SINCE</code>.
     */
    public final TableField<SessionsRecord, OffsetDateTime> SLEEP_SINCE = createField(DSL.name("SLEEP_SINCE"), SQLDataType.TIMESTAMPWITHTIMEZONE(9), this, "");

    private Sessions(Name alias, Table<SessionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Sessions(Name alias, Table<SessionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SESSIONS</code> table
     * reference
     */
    public Sessions(String alias) {
        this(DSL.name(alias), SESSIONS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.SESSIONS</code> table
     * reference
     */
    public Sessions(Name alias) {
        this(alias, SESSIONS);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.SESSIONS</code> table reference
     */
    public Sessions() {
        this(DSL.name("SESSIONS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Sessions as(String alias) {
        return new Sessions(DSL.name(alias), this);
    }

    @Override
    public Sessions as(Name alias) {
        return new Sessions(alias, this);
    }

    @Override
    public Sessions as(Table<?> alias) {
        return new Sessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(String name) {
        return new Sessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Name name) {
        return new Sessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sessions rename(Table<?> name) {
        return new Sessions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Condition condition) {
        return new Sessions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Sessions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Sessions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
