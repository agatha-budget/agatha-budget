---
openapi: 3.0.3
info:
  title: Tresorier
  description: Tr√©sorier api front to back
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
externalDocs:
  description: Find out more about Tresorier
  url: http://tresorier.me
servers:
- url: https://tresorier-back.herokuapp.com/
  description: heroku dev
- url: https://virtserver.swaggerhub.com/ermoca/Tresorier/2.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:7000/
  description: local
paths:
  /signup:
    post:
      tags:
      - Person
      summary: Create a person
      operationId: createPerson
      parameters:
      - name: name
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: profile
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Person created
          content:
            application/json:
              schema:
                type: string
                example: the submitted user has been created
        "400":
          description: an error occured
          content:
            application/json:
              schema:
                type: string
                example: the email is already registered
  /person:
    get:
      tags:
      - Person
      summary: Get the person metadata
      operationId: getPerson
      responses:
        "200":
          description: Person found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
      security:
      - accessToken: []
        refreshTokenId: []
    put:
      tags:
      - Person
      summary: Update the person metadata
      operationId: updatePerson
      parameters:
      - name: new_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_style
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_dyslexia
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                type: string
                example: the submitted user has been updated
      security:
      - accessToken: []
        refreshTokenId: []
  /login:
    post:
      tags:
      - Person
      summary: Login
      operationId: createSession
      parameters:
      - name: email
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: login successfully this request will return three cookies. "sAccessToken" and "sIdRefreshToken" need to be included in subsequent requests. "sRefreshToken" need to be included when querying "/session/refresh"
          headers:
            Set-Cookie-1:
              style: simple
              explode: false
              schema:
                type: string
                example: sAccessToken=eyJhbGciOiJS5ZTKe6wWrz4zpe%2B5UCv07sdzTwrBn4gtPbppM%2BCTk7PwhBaQ%2Bi0wayui9VHfQ%3D%3D; Path=/; Expires=Thu, 14-Jan-2021 11:55:08 GMT; Max-Age=3600; HttpOnly; SameSite=Lax
            Set-Cookie-2:
              style: simple
              explode: false
              schema:
                type: string
                example: sIdRefreshToken=4a441a0a-f888-05dd4c6f14be; Path=/; Expires=Sat, 24-Apr-2021 10:55:08 GMT; Max-Age=8640000; HttpOnly; SameSite=Lax
            Set-Cookie-3:
              style: simple
              explode: false
              schema:
                type: string
                example: sRefreshToken=B290X8kOrDOnDIFJR%2FqLgHu1vHFKoU5d93fa5c58964916b014577f97a9022ea044.V2; Path=/session/refresh; Expires=Sat, 24-Apr-2021 10:55:08 GMT; Max-Age=8640000; HttpOnly; SameSite=Lax
          content:
            application/json:
              schema:
                type: string
                example: user_id
        "400":
          description: login failed
          content:
            application/json:
              schema:
                type: string
                example: invalid password/login combination
  /logout:
    delete:
      tags:
      - Person
      summary: Logout
      operationId: deleteSession
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: string
                example: the submitted user has been unlogged
        "400":
          description: an error occured
          content:
            application/json:
              schema:
                type: string
                example: no session to revoke
      security:
      - accessToken: []
        refreshTokenId: []
  /billing:
    get:
      tags:
        - Person
      summary: get billing portal URL, new subscription if not subscribed, billing management if already subscribed
      operationId: createBillingPortalSession
      parameters:
      - name: package
        in: query
        description: chosen package
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Billing Session created
          content:
            application/json:
              schema:
                type: string
                example: url of the portal
        "400":
          description: unknown user
          content:
            application/json:
              schema:
                type: string
                example: no billing to manage
      security:
        - accessToken: []
          refreshTokenId: []
  /budget:
    put:
      tags:
      - Budget
      summary: Update a budget
      operationId: updateBudget
      parameters:
      - name: budget_id
        in: query
        description: id of the updated budget
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: new_name
        in: query
        description: new name of the new budget
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: budget was successfully updated
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              examples:
                a:
                  summary: invalid user
                  value: invalid user id
    post:
      tags:
      - Budget
      summary: Add a new budget
      operationId: addBudget
      parameters:
      - name: name
        in: query
        description: name of the new budget
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: profile
        in: query
        description: type of the new profile (user or company)
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: budget was successfully created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              examples: 
                a: 
                  summary: invalid user
                  value: invalid user id
                b:
                  summary: invalid profile
                  value: invalid profile name
      security:
      - accessToken: []
        refreshTokenId: []
    delete:
      tags:
      - Budget
      summary: Delete budget
      operationId: deleteBudget
      parameters:
      - name: budget_id
        in: query
        description: id of the budget you want to delete
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: budget was successfully deleted
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid user id
  /budget/user:
    get:
      tags:
      - Budget
      summary: Finds budgets by user
      operationId: findBudgetsByUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Budget'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid user id
  /budget/data:
    get:
      tags:
      - Budget data
      summary: Find data by budget
      operationId: findBudgetData
      parameters:
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: start_month
        in: query
        description: 'example : mars 2020 = 202003'
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: end_month
        in: query
        description: 'example : mars 2020 = 202003'
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetData'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid budget id
  /budget/amount:
    get:
      tags:
      - Budget data
      summary: Find amount on accounts by budget
      operationId: findTotalBudgetAmount
      parameters:
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: month
        in: query
        description: 'example : mars 2020 = 202003'
        required: false
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: number
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid budget id
  /account:
    put:
      tags:
      - Account
      summary: Rename an account
      operationId: updateAccount
      parameters:
      - name: account_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: new_name
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: account was successfully updated
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              examples:
                a:
                  summary: invalid account
                  value: invalid account id
                b:
                  summary: invalid budget
                  value: invalid budget id
    post:
      tags:
      - Account
      summary: Add a new account
      operationId: addAccount
      parameters:
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: amount
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
      - name: day
        in: query
        description: 'day as seen by user in his/her timezone, format : 2 january 2021 => 20210102'
        required: true
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: account was successfully created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid budget id
    delete:
      tags:
      - Account
      summary: Delete account
      operationId: deleteAccount
      parameters:
      - name: account_id
        in: query
        description: id of the account you want to delete
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: account was successfully deleted
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid account id
  /account/budget:
    get:
      tags:
      - Account
      summary: Finds accounts by budget
      operationId: findAccountsByBudget
      parameters:
      - name: budget_id
        in: query
        description: id of the budget whose accounts you want to retrieve
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid budget id
  /mcategory:
    put:
      tags:
      - Master category
      summary: Update master category
      operationId: updateMasterCategory
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: new_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_archived
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: new_deleted
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: new_color
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: master category was successfully created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid budget id
    post:
      tags:
      - Master category
      summary: Add a new master category
      operationId: addMasterCategory
      parameters:
      - name: name
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: master category was successfully created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid budget id
  /mcategory/budget:
    get:
      tags:
      - Master category
      summary: get master categories by budget
      operationId: getMasterCategoriesByBudget
      parameters:
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MasterCategory'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid budget id
  /category:
    put:
      tags:
      - Category
      summary: Update a category
      operationId: updateCategory
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: new_name
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_master_category_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_archived
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: new_deleted
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: category was successfully updated
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid category id
    post:
      tags:
      - Category
      summary: Add a new category
      operationId: addCategory
      parameters:
      - name: name
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: master_category_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: category was successfully created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid master category id
  /category/budget:
    get:
      tags:
      - Category
      summary: get categories by budget
      operationId: getCategoriesByBudget
      parameters:
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid budget id
  /operation:
    put:
      tags:
      - Operation
      summary: Update an operation
      operationId: updateOperation
      parameters:
      - name: operation_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: new_account_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_day
        in: query
        description: day of the operation (2 march 2010 => 20100302)
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: new_category_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: new_memo
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: new_pending
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid operation id
    post:
      tags:
      - Operation
      summary: Add a new operation
      operationId: addOperation
      parameters:
      - name: account_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: day
        in: query
        description: day of the operation (2 march 2010 => 20100302)
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: category_id
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: amount
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: number
      - name: memo
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: pending
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid account id
    delete:
      tags:
      - Operation
      summary: Delete operation
      operationId: deleteOperation
      parameters:
      - name: operation_id
        in: query
        description: id of the operation you want to delete
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: operation was successfully deleted
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid operation id
  /operation/account:
    get:
      tags:
      - Operation
      summary: Find operation by account and category
      operationId: findOperationsByAccount
      parameters:
      - name: account_id
        in: query
        description: id of the account whose operations you want to retrieve
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: category_id
        in: query
        description: if apply filter by category
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid account id
  /operation/budget:
    get:
      tags:
      - Operation
      summary: Find operation by budget and category
      operationId: findOperationsByBudget
      parameters:
      - name: budget_id
        in: query
        description: id of the budget whose operations you want to retrieve
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: category_id
        in: query
        description: if apply filter by category
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid budget id
  /operation/import:
    post:
      tags:
      - Operation
      summary: Add operations from ofx file
      operationId: importOfxFile
      parameters:
      - name: account_id
        in: query
        description: id of the account where operations must be created
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/ofx:
            schema:
              type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: operation was successfully created
        "400":
          description: invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid file
  /allocation:
    post:
      tags:
      - Allocation
      summary: Add a new allocation or update an existing one
      operationId: addAllocation
      parameters:
      - name: month
        in: query
        description: day of the operation (march 2010 => 201003)
        required: true
        style: form
        explode: true
        schema:
          type: number
      - name: category_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: amount
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: number
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Allocation'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid category id
  /postIt:
    post:
      tags:
      - Post it
      summary: Add a new post-it or update an existing one
      operationId: updatePostIt
      parameters:
      - name: month
        in: query
        description: month of the post-it (march 2022 => 202203)
        required: true
        style: form
        explode: true
        schema:
          type: number
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: text
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: post-it was correctly updated
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: invalid budget id
    get:
      tags:
      - Post-it
      summary: Get post-it by month and budget
      operationId: getPostIt
      parameters:
      - name: month
        in: query
        description: month of the post-it (march 2022 => 202203)
        required: true
        style: form
        explode: true
        schema:
          type: number
      - name: budget_id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostIt'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
              example: invalid budget id
components:
  schemas:
    Budget:
      required:
      - id
      - name
      - profile
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        profile:
          type: string
        isDefault:
          type: boolean
    BudgetData:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MonthData'
      example:
        "201502":
          category1Id:
            allocated: 20.0
            spent: 0.0
            available: 40.0
          category2Id:
            allocated: 30.0
            spent: 50.0
            available: -20.0
        "201803":
          category1Id:
            allocated: -10.0
            spent: 0.0
            available: 20.0
    MonthData:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CategoryData'
      example:
        category1Id:
          allocated: 20.0
          spent: 0.0
          available: 40.0
        category2Id:
          allocated: 30.0
          spent: 50.0
          available: -20.0
    CategoryData:
      required:
      - allocated
      - available
      - spent
      type: object
      properties:
        allocated:
          type: number
        spent:
          type: number
        available:
          type: number
    Account:
      required:
      - amount
      - id
      - name
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        amount:
          type: number
    MasterCategory:
      required:
      - budgetId
      - deleted
      - id
      - name
      - color
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        budgetId:
          type: string
        deleted:
          type: boolean
        color:
          type: string
    Category:
      required:
      - archived
      - deleted
      - id
      - masterCategoryId
      - name
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        masterCategoryId:
          type: string
        archived:
          type: boolean
        deleted:
          type: boolean
    Operation:
      required:
      - accountId
      - amount
      - categoryId
      - day
      - id
      - memo
      - pending
      type: object
      properties:
        id:
          type: string
        day:
          type: number
        accountId:
          type: string
        categoryId:
          type: string
        amount:
          type: number
        memo:
          type: string
        pending:
          type: boolean
    Allocation:
      required:
      - amount
      - categoryId
      - month
      type: object
      properties:
        month:
          type: number
        categoryId:
          type: string
        amount:
          type: number
      xml:
        name: account
    Person:
      required:
      - name
      - email
      - billingStatus
      - style
      - dyslexia
      - creationDate
      - hasBillingId
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        billingStatus:
          type: boolean
        style:
          type: string
        dyslexia:
          type: boolean
        creationDate:
          type: number
        hasBillingId:
          type: boolean
      xml:
        name: person
    PostIt:
      required:
      - month
      - budgetId
      - text
      type: object
      properties:
        month:
          type: number
        budgetId:
          type: string
        text:
          type: string
  securitySchemes:
    accessToken:
      type: apiKey
      name: sAccessToken
      in: cookie
    refreshToken:
      type: apiKey
      name: sRefreshToken
      in: cookie
    refreshTokenId:
      type: apiKey
      name: sIdRefreshToken
      in: cookie
