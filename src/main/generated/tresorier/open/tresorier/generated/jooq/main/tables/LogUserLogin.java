/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.main.tables;


import java.util.Arrays;
import java.util.List;

import open.tresorier.generated.jooq.main.Keys;
import open.tresorier.generated.jooq.main.Public;
import open.tresorier.generated.jooq.main.tables.records.LogUserLoginRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogUserLogin extends TableImpl<LogUserLoginRecord> {

    private static final long serialVersionUID = -1382050837;

    /**
     * The reference instance of <code>public.log_user_login</code>
     */
    public static final LogUserLogin LOG_USER_LOGIN = new LogUserLogin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogUserLoginRecord> getRecordType() {
        return LogUserLoginRecord.class;
    }

    /**
     * The column <code>public.log_user_login.id</code>.
     */
    public final TableField<LogUserLoginRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.log_user_login.id_user</code>.
     */
    public final TableField<LogUserLoginRecord, String> ID_USER = createField(DSL.name("id_user"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.log_user_login.date</code>.
     */
    public final TableField<LogUserLoginRecord, Long> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.log_user_login.action</code>.
     */
    public final TableField<LogUserLoginRecord, String> ACTION = createField(DSL.name("action"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTION_LOGIN'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>public.log_user_login</code> table reference
     */
    public LogUserLogin() {
        this(DSL.name("log_user_login"), null);
    }

    /**
     * Create an aliased <code>public.log_user_login</code> table reference
     */
    public LogUserLogin(String alias) {
        this(DSL.name(alias), LOG_USER_LOGIN);
    }

    /**
     * Create an aliased <code>public.log_user_login</code> table reference
     */
    public LogUserLogin(Name alias) {
        this(alias, LOG_USER_LOGIN);
    }

    private LogUserLogin(Name alias, Table<LogUserLoginRecord> aliased) {
        this(alias, aliased, null);
    }

    private LogUserLogin(Name alias, Table<LogUserLoginRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> LogUserLogin(Table<O> child, ForeignKey<O, LogUserLoginRecord> key) {
        super(child, key, LOG_USER_LOGIN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LogUserLoginRecord> getPrimaryKey() {
        return Keys.LOG_USER_LOGIN_PKEY;
    }

    @Override
    public List<UniqueKey<LogUserLoginRecord>> getKeys() {
        return Arrays.<UniqueKey<LogUserLoginRecord>>asList(Keys.LOG_USER_LOGIN_PKEY);
    }

    @Override
    public LogUserLogin as(String alias) {
        return new LogUserLogin(DSL.name(alias), this);
    }

    @Override
    public LogUserLogin as(Name alias) {
        return new LogUserLogin(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LogUserLogin rename(String name) {
        return new LogUserLogin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LogUserLogin rename(Name name) {
        return new LogUserLogin(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
