/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.main.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import open.tresorier.generated.jooq.main.Keys;
import open.tresorier.generated.jooq.main.Public;
import open.tresorier.generated.jooq.main.tables.records.BankAgreementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankAgreement extends TableImpl<BankAgreementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bank_agreement</code>
     */
    public static final BankAgreement BANK_AGREEMENT = new BankAgreement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankAgreementRecord> getRecordType() {
        return BankAgreementRecord.class;
    }

    /**
     * The column <code>public.bank_agreement.id</code>.
     */
    public final TableField<BankAgreementRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bank_agreement.budget_id</code>.
     */
    public final TableField<BankAgreementRecord, String> BUDGET_ID = createField(DSL.name("budget_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.bank_agreement.bank_id</code>.
     */
    public final TableField<BankAgreementRecord, String> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.bank_agreement.timestamp</code>.
     */
    public final TableField<BankAgreementRecord, Long> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.bank_agreement.nordigen_requisition_id</code>.
     */
    public final TableField<BankAgreementRecord, String> NORDIGEN_REQUISITION_ID = createField(DSL.name("nordigen_requisition_id"), SQLDataType.VARCHAR(36).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.bank_agreement.archived</code>.
     */
    public final TableField<BankAgreementRecord, Boolean> ARCHIVED = createField(DSL.name("archived"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.bank_agreement.deleted</code>.
     */
    public final TableField<BankAgreementRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private BankAgreement(Name alias, Table<BankAgreementRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankAgreement(Name alias, Table<BankAgreementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bank_agreement</code> table reference
     */
    public BankAgreement(String alias) {
        this(DSL.name(alias), BANK_AGREEMENT);
    }

    /**
     * Create an aliased <code>public.bank_agreement</code> table reference
     */
    public BankAgreement(Name alias) {
        this(alias, BANK_AGREEMENT);
    }

    /**
     * Create a <code>public.bank_agreement</code> table reference
     */
    public BankAgreement() {
        this(DSL.name("bank_agreement"), null);
    }

    public <O extends Record> BankAgreement(Table<O> child, ForeignKey<O, BankAgreementRecord> key) {
        super(child, key, BANK_AGREEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BankAgreementRecord> getPrimaryKey() {
        return Keys.BANK_AGREEMENT_PKEY;
    }

    @Override
    public List<ForeignKey<BankAgreementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BANK_AGREEMENT__BANK_AGREEMENT_BUDGET_ID_FKEY);
    }

    private transient Budget _budget;

    /**
     * Get the implicit join path to the <code>public.budget</code> table.
     */
    public Budget budget() {
        if (_budget == null)
            _budget = new Budget(this, Keys.BANK_AGREEMENT__BANK_AGREEMENT_BUDGET_ID_FKEY);

        return _budget;
    }

    @Override
    public BankAgreement as(String alias) {
        return new BankAgreement(DSL.name(alias), this);
    }

    @Override
    public BankAgreement as(Name alias) {
        return new BankAgreement(alias, this);
    }

    @Override
    public BankAgreement as(Table<?> alias) {
        return new BankAgreement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAgreement rename(String name) {
        return new BankAgreement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAgreement rename(Name name) {
        return new BankAgreement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAgreement rename(Table<?> name) {
        return new BankAgreement(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Long, String, Boolean, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super String, ? super String, ? super Long, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super String, ? super String, ? super Long, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
