/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.main.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import open.tresorier.generated.jooq.main.Keys;
import open.tresorier.generated.jooq.main.Public;
import open.tresorier.generated.jooq.main.tables.records.BudgetRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Budget extends TableImpl<BudgetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.budget</code>
     */
    public static final Budget BUDGET = new Budget();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BudgetRecord> getRecordType() {
        return BudgetRecord.class;
    }

    /**
     * The column <code>public.budget.id</code>.
     */
    public final TableField<BudgetRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.budget.person_id</code>.
     */
    public final TableField<BudgetRecord, String> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.budget.name</code>.
     */
    public final TableField<BudgetRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.budget.deleted</code>.
     */
    public final TableField<BudgetRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.budget.profile</code>.
     */
    public final TableField<BudgetRecord, String> PROFILE = createField(DSL.name("profile"), SQLDataType.VARCHAR(36).nullable(false).defaultValue(DSL.field(DSL.raw("'PROFILE_USER'::character varying"), SQLDataType.VARCHAR)), this, "");

    private Budget(Name alias, Table<BudgetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Budget(Name alias, Table<BudgetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.budget</code> table reference
     */
    public Budget(String alias) {
        this(DSL.name(alias), BUDGET);
    }

    /**
     * Create an aliased <code>public.budget</code> table reference
     */
    public Budget(Name alias) {
        this(alias, BUDGET);
    }

    /**
     * Create a <code>public.budget</code> table reference
     */
    public Budget() {
        this(DSL.name("budget"), null);
    }

    public <O extends Record> Budget(Table<O> child, ForeignKey<O, BudgetRecord> key) {
        super(child, key, BUDGET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BudgetRecord> getPrimaryKey() {
        return Keys.BUDGET_PKEY;
    }

    @Override
    public List<ForeignKey<BudgetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BUDGET__BUDGET_PERSON_ID_FKEY);
    }

    private transient Person _person;

    /**
     * Get the implicit join path to the <code>public.person</code> table.
     */
    public Person person() {
        if (_person == null)
            _person = new Person(this, Keys.BUDGET__BUDGET_PERSON_ID_FKEY);

        return _person;
    }

    @Override
    public Budget as(String alias) {
        return new Budget(DSL.name(alias), this);
    }

    @Override
    public Budget as(Name alias) {
        return new Budget(alias, this);
    }

    @Override
    public Budget as(Table<?> alias) {
        return new Budget(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Budget rename(String name) {
        return new Budget(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Budget rename(Name name) {
        return new Budget(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Budget rename(Table<?> name) {
        return new Budget(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Boolean, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
