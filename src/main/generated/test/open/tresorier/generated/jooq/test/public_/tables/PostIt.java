/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.public_.tables;


import java.util.Arrays;
import java.util.List;

import open.tresorier.generated.jooq.test.public_.Keys;
import open.tresorier.generated.jooq.test.public_.Public;
import open.tresorier.generated.jooq.test.public_.tables.records.PostItRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostIt extends TableImpl<PostItRecord> {

    private static final long serialVersionUID = -868819809;

    /**
     * The reference instance of <code>PUBLIC.POST_IT</code>
     */
    public static final PostIt POST_IT = new PostIt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostItRecord> getRecordType() {
        return PostItRecord.class;
    }

    /**
     * The column <code>PUBLIC.POST_IT.BUDGET_ID</code>.
     */
    public final TableField<PostItRecord, String> BUDGET_ID = createField(DSL.name("BUDGET_ID"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POST_IT.MONTH</code>.
     */
    public final TableField<PostItRecord, Integer> MONTH = createField(DSL.name("MONTH"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POST_IT.TEXT</code>.
     */
    public final TableField<PostItRecord, String> TEXT = createField(DSL.name("TEXT"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>PUBLIC.POST_IT</code> table reference
     */
    public PostIt() {
        this(DSL.name("POST_IT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.POST_IT</code> table reference
     */
    public PostIt(String alias) {
        this(DSL.name(alias), POST_IT);
    }

    /**
     * Create an aliased <code>PUBLIC.POST_IT</code> table reference
     */
    public PostIt(Name alias) {
        this(alias, POST_IT);
    }

    private PostIt(Name alias, Table<PostItRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostIt(Name alias, Table<PostItRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PostIt(Table<O> child, ForeignKey<O, PostItRecord> key) {
        super(child, key, POST_IT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PostItRecord> getPrimaryKey() {
        return Keys.DOUBLE_KEY;
    }

    @Override
    public List<UniqueKey<PostItRecord>> getKeys() {
        return Arrays.<UniqueKey<PostItRecord>>asList(Keys.DOUBLE_KEY);
    }

    @Override
    public List<ForeignKey<PostItRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PostItRecord, ?>>asList(Keys.CONSTRAINT_13);
    }

    public Budget budget() {
        return new Budget(this, Keys.CONSTRAINT_13);
    }

    @Override
    public List<Check<PostItRecord>> getChecks() {
        return Arrays.<Check<PostItRecord>>asList(
              Internal.createCheck(this, DSL.name("NO_INVALID_MONTH_FOR_POST_IT"), "((\"MONTH\" % 100) < 13)", true)
            , Internal.createCheck(this, DSL.name("NO_NEGATIVE_MONTH_FOR_POST_IT"), "((\"MONTH\" % 100) > 0)", true)
        );
    }

    @Override
    public PostIt as(String alias) {
        return new PostIt(DSL.name(alias), this);
    }

    @Override
    public PostIt as(Name alias) {
        return new PostIt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostIt rename(String name) {
        return new PostIt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostIt rename(Name name) {
        return new PostIt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
