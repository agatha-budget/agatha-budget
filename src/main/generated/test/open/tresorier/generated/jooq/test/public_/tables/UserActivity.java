/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.public_.tables;


import open.tresorier.generated.jooq.test.public_.Keys;
import open.tresorier.generated.jooq.test.public_.Public;
import open.tresorier.generated.jooq.test.public_.tables.records.UserActivityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserActivity extends TableImpl<UserActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.USER_ACTIVITY</code>
     */
    public static final UserActivity USER_ACTIVITY = new UserActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserActivityRecord> getRecordType() {
        return UserActivityRecord.class;
    }

    /**
     * The column <code>PUBLIC.USER_ACTIVITY.ID</code>.
     */
    public final TableField<UserActivityRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USER_ACTIVITY.USER_ID</code>.
     */
    public final TableField<UserActivityRecord, String> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USER_ACTIVITY.DATE</code>.
     */
    public final TableField<UserActivityRecord, Long> DATE = createField(DSL.name("DATE"), SQLDataType.BIGINT.defaultValue(DSL.field("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.USER_ACTIVITY.ACTION</code>.
     */
    public final TableField<UserActivityRecord, String> ACTION = createField(DSL.name("ACTION"), SQLDataType.VARCHAR(36).nullable(false).defaultValue(DSL.field("'ACTION_LOGIN'", SQLDataType.VARCHAR)), this, "");

    private UserActivity(Name alias, Table<UserActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserActivity(Name alias, Table<UserActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.USER_ACTIVITY</code> table reference
     */
    public UserActivity(String alias) {
        this(DSL.name(alias), USER_ACTIVITY);
    }

    /**
     * Create an aliased <code>PUBLIC.USER_ACTIVITY</code> table reference
     */
    public UserActivity(Name alias) {
        this(alias, USER_ACTIVITY);
    }

    /**
     * Create a <code>PUBLIC.USER_ACTIVITY</code> table reference
     */
    public UserActivity() {
        this(DSL.name("USER_ACTIVITY"), null);
    }

    public <O extends Record> UserActivity(Table<O> child, ForeignKey<O, UserActivityRecord> key) {
        super(child, key, USER_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserActivityRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E2;
    }

    @Override
    public UserActivity as(String alias) {
        return new UserActivity(DSL.name(alias), this);
    }

    @Override
    public UserActivity as(Name alias) {
        return new UserActivity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserActivity rename(String name) {
        return new UserActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserActivity rename(Name name) {
        return new UserActivity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
