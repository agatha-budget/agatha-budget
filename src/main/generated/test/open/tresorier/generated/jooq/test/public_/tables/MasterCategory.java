/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.public_.tables;


import java.util.Arrays;
import java.util.List;

import open.tresorier.generated.jooq.test.public_.Keys;
import open.tresorier.generated.jooq.test.public_.Public;
import open.tresorier.generated.jooq.test.public_.tables.records.MasterCategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MasterCategory extends TableImpl<MasterCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.MASTER_CATEGORY</code>
     */
    public static final MasterCategory MASTER_CATEGORY = new MasterCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MasterCategoryRecord> getRecordType() {
        return MasterCategoryRecord.class;
    }

    /**
     * The column <code>PUBLIC.MASTER_CATEGORY.ID</code>.
     */
    public final TableField<MasterCategoryRecord, String> ID = createField(DSL.name("ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MASTER_CATEGORY.BUDGET_ID</code>.
     */
    public final TableField<MasterCategoryRecord, String> BUDGET_ID = createField(DSL.name("BUDGET_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MASTER_CATEGORY.NAME</code>.
     */
    public final TableField<MasterCategoryRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.MASTER_CATEGORY.DELETED</code>.
     */
    public final TableField<MasterCategoryRecord, Boolean> DELETED = createField(DSL.name("DELETED"), SQLDataType.BOOLEAN.defaultValue(DSL.field("FALSE", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>PUBLIC.MASTER_CATEGORY.COLOR</code>.
     */
    public final TableField<MasterCategoryRecord, String> COLOR = createField(DSL.name("COLOR"), SQLDataType.VARCHAR(36).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private MasterCategory(Name alias, Table<MasterCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private MasterCategory(Name alias, Table<MasterCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.MASTER_CATEGORY</code> table reference
     */
    public MasterCategory(String alias) {
        this(DSL.name(alias), MASTER_CATEGORY);
    }

    /**
     * Create an aliased <code>PUBLIC.MASTER_CATEGORY</code> table reference
     */
    public MasterCategory(Name alias) {
        this(alias, MASTER_CATEGORY);
    }

    /**
     * Create a <code>PUBLIC.MASTER_CATEGORY</code> table reference
     */
    public MasterCategory() {
        this(DSL.name("MASTER_CATEGORY"), null);
    }

    public <O extends Record> MasterCategory(Table<O> child, ForeignKey<O, MasterCategoryRecord> key) {
        super(child, key, MASTER_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<MasterCategoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<ForeignKey<MasterCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_D3);
    }

    private transient Budget _budget;

    /**
     * Get the implicit join path to the <code>PUBLIC.BUDGET</code> table.
     */
    public Budget budget() {
        if (_budget == null)
            _budget = new Budget(this, Keys.CONSTRAINT_D3);

        return _budget;
    }

    @Override
    public MasterCategory as(String alias) {
        return new MasterCategory(DSL.name(alias), this);
    }

    @Override
    public MasterCategory as(Name alias) {
        return new MasterCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MasterCategory rename(String name) {
        return new MasterCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MasterCategory rename(Name name) {
        return new MasterCategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
