/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.records;


import open.tresorier.generated.jooq.test.information_schema.tables.Synonyms;

import org.jooq.Field;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SynonymsRecord extends TableRecordImpl<SynonymsRecord> implements Record9<String, String, String, String, String, String, String, String, Integer> {

    private static final long serialVersionUID = -998381812;

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_CATALOG</code>.
     */
    public SynonymsRecord setSynonymCatalog(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_CATALOG</code>.
     */
    public String getSynonymCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_SCHEMA</code>.
     */
    public SynonymsRecord setSynonymSchema(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_SCHEMA</code>.
     */
    public String getSynonymSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_NAME</code>.
     */
    public SynonymsRecord setSynonymName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_NAME</code>.
     */
    public String getSynonymName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_FOR</code>.
     */
    public SynonymsRecord setSynonymFor(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_FOR</code>.
     */
    public String getSynonymFor() {
        return (String) get(3);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_FOR_SCHEMA</code>.
     */
    public SynonymsRecord setSynonymForSchema(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.SYNONYM_FOR_SCHEMA</code>.
     */
    public String getSynonymForSchema() {
        return (String) get(4);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.TYPE_NAME</code>.
     */
    public SynonymsRecord setTypeName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.TYPE_NAME</code>.
     */
    public String getTypeName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.STATUS</code>.
     */
    public SynonymsRecord setStatus(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.STATUS</code>.
     */
    public String getStatus() {
        return (String) get(6);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.REMARKS</code>.
     */
    public SynonymsRecord setRemarks(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.REMARKS</code>.
     */
    public String getRemarks() {
        return (String) get(7);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SYNONYMS.ID</code>.
     */
    public SynonymsRecord setId(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SYNONYMS.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<String, String, String, String, String, String, String, String, Integer> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Synonyms.SYNONYMS.SYNONYM_CATALOG;
    }

    @Override
    public Field<String> field2() {
        return Synonyms.SYNONYMS.SYNONYM_SCHEMA;
    }

    @Override
    public Field<String> field3() {
        return Synonyms.SYNONYMS.SYNONYM_NAME;
    }

    @Override
    public Field<String> field4() {
        return Synonyms.SYNONYMS.SYNONYM_FOR;
    }

    @Override
    public Field<String> field5() {
        return Synonyms.SYNONYMS.SYNONYM_FOR_SCHEMA;
    }

    @Override
    public Field<String> field6() {
        return Synonyms.SYNONYMS.TYPE_NAME;
    }

    @Override
    public Field<String> field7() {
        return Synonyms.SYNONYMS.STATUS;
    }

    @Override
    public Field<String> field8() {
        return Synonyms.SYNONYMS.REMARKS;
    }

    @Override
    public Field<Integer> field9() {
        return Synonyms.SYNONYMS.ID;
    }

    @Override
    public String component1() {
        return getSynonymCatalog();
    }

    @Override
    public String component2() {
        return getSynonymSchema();
    }

    @Override
    public String component3() {
        return getSynonymName();
    }

    @Override
    public String component4() {
        return getSynonymFor();
    }

    @Override
    public String component5() {
        return getSynonymForSchema();
    }

    @Override
    public String component6() {
        return getTypeName();
    }

    @Override
    public String component7() {
        return getStatus();
    }

    @Override
    public String component8() {
        return getRemarks();
    }

    @Override
    public Integer component9() {
        return getId();
    }

    @Override
    public String value1() {
        return getSynonymCatalog();
    }

    @Override
    public String value2() {
        return getSynonymSchema();
    }

    @Override
    public String value3() {
        return getSynonymName();
    }

    @Override
    public String value4() {
        return getSynonymFor();
    }

    @Override
    public String value5() {
        return getSynonymForSchema();
    }

    @Override
    public String value6() {
        return getTypeName();
    }

    @Override
    public String value7() {
        return getStatus();
    }

    @Override
    public String value8() {
        return getRemarks();
    }

    @Override
    public Integer value9() {
        return getId();
    }

    @Override
    public SynonymsRecord value1(String value) {
        setSynonymCatalog(value);
        return this;
    }

    @Override
    public SynonymsRecord value2(String value) {
        setSynonymSchema(value);
        return this;
    }

    @Override
    public SynonymsRecord value3(String value) {
        setSynonymName(value);
        return this;
    }

    @Override
    public SynonymsRecord value4(String value) {
        setSynonymFor(value);
        return this;
    }

    @Override
    public SynonymsRecord value5(String value) {
        setSynonymForSchema(value);
        return this;
    }

    @Override
    public SynonymsRecord value6(String value) {
        setTypeName(value);
        return this;
    }

    @Override
    public SynonymsRecord value7(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public SynonymsRecord value8(String value) {
        setRemarks(value);
        return this;
    }

    @Override
    public SynonymsRecord value9(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SynonymsRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, Integer value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SynonymsRecord
     */
    public SynonymsRecord() {
        super(Synonyms.SYNONYMS);
    }

    /**
     * Create a detached, initialised SynonymsRecord
     */
    public SynonymsRecord(String synonymCatalog, String synonymSchema, String synonymName, String synonymFor, String synonymForSchema, String typeName, String status, String remarks, Integer id) {
        super(Synonyms.SYNONYMS);

        set(0, synonymCatalog);
        set(1, synonymSchema);
        set(2, synonymName);
        set(3, synonymFor);
        set(4, synonymForSchema);
        set(5, typeName);
        set(6, status);
        set(7, remarks);
        set(8, id);
    }
}
