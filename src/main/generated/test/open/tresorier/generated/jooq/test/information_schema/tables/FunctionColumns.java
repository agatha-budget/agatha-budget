/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables;


import open.tresorier.generated.jooq.test.information_schema.InformationSchema;
import open.tresorier.generated.jooq.test.information_schema.tables.records.FunctionColumnsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FunctionColumns extends TableImpl<FunctionColumnsRecord> {

    private static final long serialVersionUID = 1585368790;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code>
     */
    public static final FunctionColumns FUNCTION_COLUMNS = new FunctionColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FunctionColumnsRecord> getRecordType() {
        return FunctionColumnsRecord.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.ALIAS_CATALOG</code>.
     */
    public final TableField<FunctionColumnsRecord, String> ALIAS_CATALOG = createField(DSL.name("ALIAS_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.ALIAS_SCHEMA</code>.
     */
    public final TableField<FunctionColumnsRecord, String> ALIAS_SCHEMA = createField(DSL.name("ALIAS_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.ALIAS_NAME</code>.
     */
    public final TableField<FunctionColumnsRecord, String> ALIAS_NAME = createField(DSL.name("ALIAS_NAME"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.JAVA_CLASS</code>.
     */
    public final TableField<FunctionColumnsRecord, String> JAVA_CLASS = createField(DSL.name("JAVA_CLASS"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.JAVA_METHOD</code>.
     */
    public final TableField<FunctionColumnsRecord, String> JAVA_METHOD = createField(DSL.name("JAVA_METHOD"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.COLUMN_COUNT</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> COLUMN_COUNT = createField(DSL.name("COLUMN_COUNT"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.POS</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> POS = createField(DSL.name("POS"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.COLUMN_NAME</code>.
     */
    public final TableField<FunctionColumnsRecord, String> COLUMN_NAME = createField(DSL.name("COLUMN_NAME"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.DATA_TYPE</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> DATA_TYPE = createField(DSL.name("DATA_TYPE"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.TYPE_NAME</code>.
     */
    public final TableField<FunctionColumnsRecord, String> TYPE_NAME = createField(DSL.name("TYPE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.PRECISION</code>.
     */
    public final TableField<FunctionColumnsRecord, Integer> PRECISION = createField(DSL.name("PRECISION"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.SCALE</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> SCALE = createField(DSL.name("SCALE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.RADIX</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> RADIX = createField(DSL.name("RADIX"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.NULLABLE</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> NULLABLE = createField(DSL.name("NULLABLE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.COLUMN_TYPE</code>.
     */
    public final TableField<FunctionColumnsRecord, Short> COLUMN_TYPE = createField(DSL.name("COLUMN_TYPE"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.REMARKS</code>.
     */
    public final TableField<FunctionColumnsRecord, String> REMARKS = createField(DSL.name("REMARKS"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS.COLUMN_DEFAULT</code>.
     */
    public final TableField<FunctionColumnsRecord, String> COLUMN_DEFAULT = createField(DSL.name("COLUMN_DEFAULT"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * Create a <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code> table reference
     */
    public FunctionColumns() {
        this(DSL.name("FUNCTION_COLUMNS"), null);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code> table reference
     */
    public FunctionColumns(String alias) {
        this(DSL.name(alias), FUNCTION_COLUMNS);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.FUNCTION_COLUMNS</code> table reference
     */
    public FunctionColumns(Name alias) {
        this(alias, FUNCTION_COLUMNS);
    }

    private FunctionColumns(Name alias, Table<FunctionColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FunctionColumns(Name alias, Table<FunctionColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FunctionColumns(Table<O> child, ForeignKey<O, FunctionColumnsRecord> key) {
        super(child, key, FUNCTION_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public FunctionColumns as(String alias) {
        return new FunctionColumns(DSL.name(alias), this);
    }

    @Override
    public FunctionColumns as(Name alias) {
        return new FunctionColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FunctionColumns rename(String name) {
        return new FunctionColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FunctionColumns rename(Name name) {
        return new FunctionColumns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<String, String, String, String, String, Integer, Integer, String, Integer, String, Integer, Short, Short, Short, Short, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
