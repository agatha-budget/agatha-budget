/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.records;


import open.tresorier.generated.jooq.test.information_schema.tables.Views;

import org.jooq.Field;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewsRecord extends TableRecordImpl<ViewsRecord> implements Record12<String, String, String, String, String, String, String, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_CATALOG</code>.
     */
    public ViewsRecord setTableCatalog(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_CATALOG</code>.
     */
    public String getTableCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_SCHEMA</code>.
     */
    public ViewsRecord setTableSchema(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_SCHEMA</code>.
     */
    public String getTableSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_NAME</code>.
     */
    public ViewsRecord setTableName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.TABLE_NAME</code>.
     */
    public String getTableName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.VIEW_DEFINITION</code>.
     */
    public ViewsRecord setViewDefinition(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.VIEW_DEFINITION</code>.
     */
    public String getViewDefinition() {
        return (String) get(3);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.CHECK_OPTION</code>.
     */
    public ViewsRecord setCheckOption(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.CHECK_OPTION</code>.
     */
    public String getCheckOption() {
        return (String) get(4);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.IS_UPDATABLE</code>.
     */
    public ViewsRecord setIsUpdatable(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.IS_UPDATABLE</code>.
     */
    public String getIsUpdatable() {
        return (String) get(5);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.INSERTABLE_INTO</code>.
     */
    public ViewsRecord setInsertableInto(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.INSERTABLE_INTO</code>.
     */
    public String getInsertableInto() {
        return (String) get(6);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_UPDATABLE</code>.
     */
    public ViewsRecord setIsTriggerUpdatable(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_UPDATABLE</code>.
     */
    public String getIsTriggerUpdatable() {
        return (String) get(7);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_DELETABLE</code>.
     */
    public ViewsRecord setIsTriggerDeletable(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_DELETABLE</code>.
     */
    public String getIsTriggerDeletable() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_INSERTABLE_INTO</code>.
     */
    public ViewsRecord setIsTriggerInsertableInto(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.VIEWS.IS_TRIGGER_INSERTABLE_INTO</code>.
     */
    public String getIsTriggerInsertableInto() {
        return (String) get(9);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.STATUS</code>.
     */
    public ViewsRecord setStatus(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.STATUS</code>.
     */
    public String getStatus() {
        return (String) get(10);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.VIEWS.REMARKS</code>.
     */
    public ViewsRecord setRemarks(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.VIEWS.REMARKS</code>.
     */
    public String getRemarks() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<String, String, String, String, String, String, String, String, String, String, String, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Views.VIEWS.TABLE_CATALOG;
    }

    @Override
    public Field<String> field2() {
        return Views.VIEWS.TABLE_SCHEMA;
    }

    @Override
    public Field<String> field3() {
        return Views.VIEWS.TABLE_NAME;
    }

    @Override
    public Field<String> field4() {
        return Views.VIEWS.VIEW_DEFINITION;
    }

    @Override
    public Field<String> field5() {
        return Views.VIEWS.CHECK_OPTION;
    }

    @Override
    public Field<String> field6() {
        return Views.VIEWS.IS_UPDATABLE;
    }

    @Override
    public Field<String> field7() {
        return Views.VIEWS.INSERTABLE_INTO;
    }

    @Override
    public Field<String> field8() {
        return Views.VIEWS.IS_TRIGGER_UPDATABLE;
    }

    @Override
    public Field<String> field9() {
        return Views.VIEWS.IS_TRIGGER_DELETABLE;
    }

    @Override
    public Field<String> field10() {
        return Views.VIEWS.IS_TRIGGER_INSERTABLE_INTO;
    }

    @Override
    public Field<String> field11() {
        return Views.VIEWS.STATUS;
    }

    @Override
    public Field<String> field12() {
        return Views.VIEWS.REMARKS;
    }

    @Override
    public String component1() {
        return getTableCatalog();
    }

    @Override
    public String component2() {
        return getTableSchema();
    }

    @Override
    public String component3() {
        return getTableName();
    }

    @Override
    public String component4() {
        return getViewDefinition();
    }

    @Override
    public String component5() {
        return getCheckOption();
    }

    @Override
    public String component6() {
        return getIsUpdatable();
    }

    @Override
    public String component7() {
        return getInsertableInto();
    }

    @Override
    public String component8() {
        return getIsTriggerUpdatable();
    }

    @Override
    public String component9() {
        return getIsTriggerDeletable();
    }

    @Override
    public String component10() {
        return getIsTriggerInsertableInto();
    }

    @Override
    public String component11() {
        return getStatus();
    }

    @Override
    public String component12() {
        return getRemarks();
    }

    @Override
    public String value1() {
        return getTableCatalog();
    }

    @Override
    public String value2() {
        return getTableSchema();
    }

    @Override
    public String value3() {
        return getTableName();
    }

    @Override
    public String value4() {
        return getViewDefinition();
    }

    @Override
    public String value5() {
        return getCheckOption();
    }

    @Override
    public String value6() {
        return getIsUpdatable();
    }

    @Override
    public String value7() {
        return getInsertableInto();
    }

    @Override
    public String value8() {
        return getIsTriggerUpdatable();
    }

    @Override
    public String value9() {
        return getIsTriggerDeletable();
    }

    @Override
    public String value10() {
        return getIsTriggerInsertableInto();
    }

    @Override
    public String value11() {
        return getStatus();
    }

    @Override
    public String value12() {
        return getRemarks();
    }

    @Override
    public ViewsRecord value1(String value) {
        setTableCatalog(value);
        return this;
    }

    @Override
    public ViewsRecord value2(String value) {
        setTableSchema(value);
        return this;
    }

    @Override
    public ViewsRecord value3(String value) {
        setTableName(value);
        return this;
    }

    @Override
    public ViewsRecord value4(String value) {
        setViewDefinition(value);
        return this;
    }

    @Override
    public ViewsRecord value5(String value) {
        setCheckOption(value);
        return this;
    }

    @Override
    public ViewsRecord value6(String value) {
        setIsUpdatable(value);
        return this;
    }

    @Override
    public ViewsRecord value7(String value) {
        setInsertableInto(value);
        return this;
    }

    @Override
    public ViewsRecord value8(String value) {
        setIsTriggerUpdatable(value);
        return this;
    }

    @Override
    public ViewsRecord value9(String value) {
        setIsTriggerDeletable(value);
        return this;
    }

    @Override
    public ViewsRecord value10(String value) {
        setIsTriggerInsertableInto(value);
        return this;
    }

    @Override
    public ViewsRecord value11(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public ViewsRecord value12(String value) {
        setRemarks(value);
        return this;
    }

    @Override
    public ViewsRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, String value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ViewsRecord
     */
    public ViewsRecord() {
        super(Views.VIEWS);
    }

    /**
     * Create a detached, initialised ViewsRecord
     */
    public ViewsRecord(String tableCatalog, String tableSchema, String tableName, String viewDefinition, String checkOption, String isUpdatable, String insertableInto, String isTriggerUpdatable, String isTriggerDeletable, String isTriggerInsertableInto, String status, String remarks) {
        super(Views.VIEWS);

        setTableCatalog(tableCatalog);
        setTableSchema(tableSchema);
        setTableName(tableName);
        setViewDefinition(viewDefinition);
        setCheckOption(checkOption);
        setIsUpdatable(isUpdatable);
        setInsertableInto(insertableInto);
        setIsTriggerUpdatable(isTriggerUpdatable);
        setIsTriggerDeletable(isTriggerDeletable);
        setIsTriggerInsertableInto(isTriggerInsertableInto);
        setStatus(status);
        setRemarks(remarks);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ViewsRecord
     */
    public ViewsRecord(open.tresorier.generated.jooq.test.information_schema.tables.pojos.Views value) {
        super(Views.VIEWS);

        if (value != null) {
            setTableCatalog(value.getTableCatalog());
            setTableSchema(value.getTableSchema());
            setTableName(value.getTableName());
            setViewDefinition(value.getViewDefinition());
            setCheckOption(value.getCheckOption());
            setIsUpdatable(value.getIsUpdatable());
            setInsertableInto(value.getInsertableInto());
            setIsTriggerUpdatable(value.getIsTriggerUpdatable());
            setIsTriggerDeletable(value.getIsTriggerDeletable());
            setIsTriggerInsertableInto(value.getIsTriggerInsertableInto());
            setStatus(value.getStatus());
            setRemarks(value.getRemarks());
            resetChangedOnNotNull();
        }
    }
}
