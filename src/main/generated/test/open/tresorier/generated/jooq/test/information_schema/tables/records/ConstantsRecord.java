/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.records;


import open.tresorier.generated.jooq.test.information_schema.tables.Constants;

import org.jooq.Field;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConstantsRecord extends TableRecordImpl<ConstantsRecord> implements Record7<String, String, String, Integer, String, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.CONSTANT_CATALOG</code>.
     */
    public ConstantsRecord setConstantCatalog(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.CONSTANT_CATALOG</code>.
     */
    public String getConstantCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.CONSTANT_SCHEMA</code>.
     */
    public ConstantsRecord setConstantSchema(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.CONSTANT_SCHEMA</code>.
     */
    public String getConstantSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.CONSTANT_NAME</code>.
     */
    public ConstantsRecord setConstantName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.CONSTANT_NAME</code>.
     */
    public String getConstantName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.DATA_TYPE</code>.
     */
    public ConstantsRecord setDataType(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.DATA_TYPE</code>.
     */
    public Integer getDataType() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.REMARKS</code>.
     */
    public ConstantsRecord setRemarks(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.REMARKS</code>.
     */
    public String getRemarks() {
        return (String) get(4);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.SQL</code>.
     */
    public ConstantsRecord setSql(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.SQL</code>.
     */
    public String getSql() {
        return (String) get(5);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.CONSTANTS.ID</code>.
     */
    public ConstantsRecord setId(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.CONSTANTS.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, Integer, String, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, Integer, String, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Constants.CONSTANTS.CONSTANT_CATALOG;
    }

    @Override
    public Field<String> field2() {
        return Constants.CONSTANTS.CONSTANT_SCHEMA;
    }

    @Override
    public Field<String> field3() {
        return Constants.CONSTANTS.CONSTANT_NAME;
    }

    @Override
    public Field<Integer> field4() {
        return Constants.CONSTANTS.DATA_TYPE;
    }

    @Override
    public Field<String> field5() {
        return Constants.CONSTANTS.REMARKS;
    }

    @Override
    public Field<String> field6() {
        return Constants.CONSTANTS.SQL;
    }

    @Override
    public Field<Integer> field7() {
        return Constants.CONSTANTS.ID;
    }

    @Override
    public String component1() {
        return getConstantCatalog();
    }

    @Override
    public String component2() {
        return getConstantSchema();
    }

    @Override
    public String component3() {
        return getConstantName();
    }

    @Override
    public Integer component4() {
        return getDataType();
    }

    @Override
    public String component5() {
        return getRemarks();
    }

    @Override
    public String component6() {
        return getSql();
    }

    @Override
    public Integer component7() {
        return getId();
    }

    @Override
    public String value1() {
        return getConstantCatalog();
    }

    @Override
    public String value2() {
        return getConstantSchema();
    }

    @Override
    public String value3() {
        return getConstantName();
    }

    @Override
    public Integer value4() {
        return getDataType();
    }

    @Override
    public String value5() {
        return getRemarks();
    }

    @Override
    public String value6() {
        return getSql();
    }

    @Override
    public Integer value7() {
        return getId();
    }

    @Override
    public ConstantsRecord value1(String value) {
        setConstantCatalog(value);
        return this;
    }

    @Override
    public ConstantsRecord value2(String value) {
        setConstantSchema(value);
        return this;
    }

    @Override
    public ConstantsRecord value3(String value) {
        setConstantName(value);
        return this;
    }

    @Override
    public ConstantsRecord value4(Integer value) {
        setDataType(value);
        return this;
    }

    @Override
    public ConstantsRecord value5(String value) {
        setRemarks(value);
        return this;
    }

    @Override
    public ConstantsRecord value6(String value) {
        setSql(value);
        return this;
    }

    @Override
    public ConstantsRecord value7(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ConstantsRecord values(String value1, String value2, String value3, Integer value4, String value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConstantsRecord
     */
    public ConstantsRecord() {
        super(Constants.CONSTANTS);
    }

    /**
     * Create a detached, initialised ConstantsRecord
     */
    public ConstantsRecord(String constantCatalog, String constantSchema, String constantName, Integer dataType, String remarks, String sql, Integer id) {
        super(Constants.CONSTANTS);

        setConstantCatalog(constantCatalog);
        setConstantSchema(constantSchema);
        setConstantName(constantName);
        setDataType(dataType);
        setRemarks(remarks);
        setSql(sql);
        setId(id);
    }

    /**
     * Create a detached, initialised ConstantsRecord
     */
    public ConstantsRecord(open.tresorier.generated.jooq.test.information_schema.tables.pojos.Constants value) {
        super(Constants.CONSTANTS);

        if (value != null) {
            setConstantCatalog(value.getConstantCatalog());
            setConstantSchema(value.getConstantSchema());
            setConstantName(value.getConstantName());
            setDataType(value.getDataType());
            setRemarks(value.getRemarks());
            setSql(value.getSql());
            setId(value.getId());
        }
    }
}
