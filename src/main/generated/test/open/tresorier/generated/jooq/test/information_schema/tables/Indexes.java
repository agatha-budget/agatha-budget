/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables;


import java.util.function.Function;

import open.tresorier.generated.jooq.test.information_schema.InformationSchema;
import open.tresorier.generated.jooq.test.information_schema.tables.records.IndexesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indexes extends TableImpl<IndexesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.INDEXES</code>
     */
    public static final Indexes INDEXES = new Indexes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndexesRecord> getRecordType() {
        return IndexesRecord.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.INDEX_CATALOG</code>.
     */
    public final TableField<IndexesRecord, String> INDEX_CATALOG = createField(DSL.name("INDEX_CATALOG"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.INDEX_SCHEMA</code>.
     */
    public final TableField<IndexesRecord, String> INDEX_SCHEMA = createField(DSL.name("INDEX_SCHEMA"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.INDEX_NAME</code>.
     */
    public final TableField<IndexesRecord, String> INDEX_NAME = createField(DSL.name("INDEX_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.TABLE_CATALOG</code>.
     */
    public final TableField<IndexesRecord, String> TABLE_CATALOG = createField(DSL.name("TABLE_CATALOG"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.TABLE_SCHEMA</code>.
     */
    public final TableField<IndexesRecord, String> TABLE_SCHEMA = createField(DSL.name("TABLE_SCHEMA"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.TABLE_NAME</code>.
     */
    public final TableField<IndexesRecord, String> TABLE_NAME = createField(DSL.name("TABLE_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.INDEX_TYPE_NAME</code>.
     */
    public final TableField<IndexesRecord, String> INDEX_TYPE_NAME = createField(DSL.name("INDEX_TYPE_NAME"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.NULLS_DISTINCT</code>.
     */
    public final TableField<IndexesRecord, String> NULLS_DISTINCT = createField(DSL.name("NULLS_DISTINCT"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.IS_GENERATED</code>.
     */
    public final TableField<IndexesRecord, Boolean> IS_GENERATED = createField(DSL.name("IS_GENERATED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.REMARKS</code>.
     */
    public final TableField<IndexesRecord, String> REMARKS = createField(DSL.name("REMARKS"), SQLDataType.VARCHAR(1000000000), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.INDEXES.INDEX_CLASS</code>.
     */
    public final TableField<IndexesRecord, String> INDEX_CLASS = createField(DSL.name("INDEX_CLASS"), SQLDataType.VARCHAR(1000000000), this, "");

    private Indexes(Name alias, Table<IndexesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Indexes(Name alias, Table<IndexesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.INDEXES</code> table reference
     */
    public Indexes(String alias) {
        this(DSL.name(alias), INDEXES);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.INDEXES</code> table reference
     */
    public Indexes(Name alias) {
        this(alias, INDEXES);
    }

    /**
     * Create a <code>INFORMATION_SCHEMA.INDEXES</code> table reference
     */
    public Indexes() {
        this(DSL.name("INDEXES"), null);
    }

    public <O extends Record> Indexes(Table<O> child, ForeignKey<O, IndexesRecord> key) {
        super(child, key, INDEXES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public Indexes as(String alias) {
        return new Indexes(DSL.name(alias), this);
    }

    @Override
    public Indexes as(Name alias) {
        return new Indexes(alias, this);
    }

    @Override
    public Indexes as(Table<?> alias) {
        return new Indexes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Indexes rename(String name) {
        return new Indexes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Indexes rename(Name name) {
        return new Indexes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Indexes rename(Table<?> name) {
        return new Indexes(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, String, String, String, String, Boolean, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
