/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables.records;


import open.tresorier.generated.jooq.test.information_schema.tables.Sequences;

import org.jooq.Field;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SequencesRecord extends TableRecordImpl<SequencesRecord> implements Record18<String, String, String, String, Integer, Integer, Integer, Long, Long, Long, Long, String, String, Integer, Integer, Long, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_CATALOG</code>.
     */
    public SequencesRecord setSequenceCatalog(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_CATALOG</code>.
     */
    public String getSequenceCatalog() {
        return (String) get(0);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_SCHEMA</code>.
     */
    public SequencesRecord setSequenceSchema(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_SCHEMA</code>.
     */
    public String getSequenceSchema() {
        return (String) get(1);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_NAME</code>.
     */
    public SequencesRecord setSequenceName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.SEQUENCE_NAME</code>.
     */
    public String getSequenceName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.DATA_TYPE</code>.
     */
    public SequencesRecord setDataType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.DATA_TYPE</code>.
     */
    public String getDataType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_PRECISION</code>.
     */
    public SequencesRecord setNumericPrecision(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_PRECISION</code>.
     */
    public Integer getNumericPrecision() {
        return (Integer) get(4);
    }

    /**
     * Setter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_PRECISION_RADIX</code>.
     */
    public SequencesRecord setNumericPrecisionRadix(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_PRECISION_RADIX</code>.
     */
    public Integer getNumericPrecisionRadix() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_SCALE</code>.
     */
    public SequencesRecord setNumericScale(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.NUMERIC_SCALE</code>.
     */
    public Integer getNumericScale() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.START_VALUE</code>.
     */
    public SequencesRecord setStartValue(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.START_VALUE</code>.
     */
    public Long getStartValue() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.MINIMUM_VALUE</code>.
     */
    public SequencesRecord setMinimumValue(Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.MINIMUM_VALUE</code>.
     */
    public Long getMinimumValue() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.MAXIMUM_VALUE</code>.
     */
    public SequencesRecord setMaximumValue(Long value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.MAXIMUM_VALUE</code>.
     */
    public Long getMaximumValue() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.INCREMENT</code>.
     */
    public SequencesRecord setIncrement(Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.INCREMENT</code>.
     */
    public Long getIncrement() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.CYCLE_OPTION</code>.
     */
    public SequencesRecord setCycleOption(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.CYCLE_OPTION</code>.
     */
    public String getCycleOption() {
        return (String) get(11);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_DATA_TYPE</code>.
     */
    public SequencesRecord setDeclaredDataType(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_DATA_TYPE</code>.
     */
    public String getDeclaredDataType() {
        return (String) get(12);
    }

    /**
     * Setter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_NUMERIC_PRECISION</code>.
     */
    public SequencesRecord setDeclaredNumericPrecision(Integer value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_NUMERIC_PRECISION</code>.
     */
    public Integer getDeclaredNumericPrecision() {
        return (Integer) get(13);
    }

    /**
     * Setter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_NUMERIC_SCALE</code>.
     */
    public SequencesRecord setDeclaredNumericScale(Integer value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>INFORMATION_SCHEMA.SEQUENCES.DECLARED_NUMERIC_SCALE</code>.
     */
    public Integer getDeclaredNumericScale() {
        return (Integer) get(14);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.BASE_VALUE</code>.
     */
    public SequencesRecord setBaseValue(Long value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.BASE_VALUE</code>.
     */
    public Long getBaseValue() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.CACHE</code>.
     */
    public SequencesRecord setCache(Long value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.CACHE</code>.
     */
    public Long getCache() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>INFORMATION_SCHEMA.SEQUENCES.REMARKS</code>.
     */
    public SequencesRecord setRemarks(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>INFORMATION_SCHEMA.SEQUENCES.REMARKS</code>.
     */
    public String getRemarks() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, Integer, Integer, Integer, Long, Long, Long, Long, String, String, Integer, Integer, Long, Long, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<String, String, String, String, Integer, Integer, Integer, Long, Long, Long, Long, String, String, Integer, Integer, Long, Long, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Sequences.SEQUENCES.SEQUENCE_CATALOG;
    }

    @Override
    public Field<String> field2() {
        return Sequences.SEQUENCES.SEQUENCE_SCHEMA;
    }

    @Override
    public Field<String> field3() {
        return Sequences.SEQUENCES.SEQUENCE_NAME;
    }

    @Override
    public Field<String> field4() {
        return Sequences.SEQUENCES.DATA_TYPE;
    }

    @Override
    public Field<Integer> field5() {
        return Sequences.SEQUENCES.NUMERIC_PRECISION;
    }

    @Override
    public Field<Integer> field6() {
        return Sequences.SEQUENCES.NUMERIC_PRECISION_RADIX;
    }

    @Override
    public Field<Integer> field7() {
        return Sequences.SEQUENCES.NUMERIC_SCALE;
    }

    @Override
    public Field<Long> field8() {
        return Sequences.SEQUENCES.START_VALUE;
    }

    @Override
    public Field<Long> field9() {
        return Sequences.SEQUENCES.MINIMUM_VALUE;
    }

    @Override
    public Field<Long> field10() {
        return Sequences.SEQUENCES.MAXIMUM_VALUE;
    }

    @Override
    public Field<Long> field11() {
        return Sequences.SEQUENCES.INCREMENT;
    }

    @Override
    public Field<String> field12() {
        return Sequences.SEQUENCES.CYCLE_OPTION;
    }

    @Override
    public Field<String> field13() {
        return Sequences.SEQUENCES.DECLARED_DATA_TYPE;
    }

    @Override
    public Field<Integer> field14() {
        return Sequences.SEQUENCES.DECLARED_NUMERIC_PRECISION;
    }

    @Override
    public Field<Integer> field15() {
        return Sequences.SEQUENCES.DECLARED_NUMERIC_SCALE;
    }

    @Override
    public Field<Long> field16() {
        return Sequences.SEQUENCES.BASE_VALUE;
    }

    @Override
    public Field<Long> field17() {
        return Sequences.SEQUENCES.CACHE;
    }

    @Override
    public Field<String> field18() {
        return Sequences.SEQUENCES.REMARKS;
    }

    @Override
    public String component1() {
        return getSequenceCatalog();
    }

    @Override
    public String component2() {
        return getSequenceSchema();
    }

    @Override
    public String component3() {
        return getSequenceName();
    }

    @Override
    public String component4() {
        return getDataType();
    }

    @Override
    public Integer component5() {
        return getNumericPrecision();
    }

    @Override
    public Integer component6() {
        return getNumericPrecisionRadix();
    }

    @Override
    public Integer component7() {
        return getNumericScale();
    }

    @Override
    public Long component8() {
        return getStartValue();
    }

    @Override
    public Long component9() {
        return getMinimumValue();
    }

    @Override
    public Long component10() {
        return getMaximumValue();
    }

    @Override
    public Long component11() {
        return getIncrement();
    }

    @Override
    public String component12() {
        return getCycleOption();
    }

    @Override
    public String component13() {
        return getDeclaredDataType();
    }

    @Override
    public Integer component14() {
        return getDeclaredNumericPrecision();
    }

    @Override
    public Integer component15() {
        return getDeclaredNumericScale();
    }

    @Override
    public Long component16() {
        return getBaseValue();
    }

    @Override
    public Long component17() {
        return getCache();
    }

    @Override
    public String component18() {
        return getRemarks();
    }

    @Override
    public String value1() {
        return getSequenceCatalog();
    }

    @Override
    public String value2() {
        return getSequenceSchema();
    }

    @Override
    public String value3() {
        return getSequenceName();
    }

    @Override
    public String value4() {
        return getDataType();
    }

    @Override
    public Integer value5() {
        return getNumericPrecision();
    }

    @Override
    public Integer value6() {
        return getNumericPrecisionRadix();
    }

    @Override
    public Integer value7() {
        return getNumericScale();
    }

    @Override
    public Long value8() {
        return getStartValue();
    }

    @Override
    public Long value9() {
        return getMinimumValue();
    }

    @Override
    public Long value10() {
        return getMaximumValue();
    }

    @Override
    public Long value11() {
        return getIncrement();
    }

    @Override
    public String value12() {
        return getCycleOption();
    }

    @Override
    public String value13() {
        return getDeclaredDataType();
    }

    @Override
    public Integer value14() {
        return getDeclaredNumericPrecision();
    }

    @Override
    public Integer value15() {
        return getDeclaredNumericScale();
    }

    @Override
    public Long value16() {
        return getBaseValue();
    }

    @Override
    public Long value17() {
        return getCache();
    }

    @Override
    public String value18() {
        return getRemarks();
    }

    @Override
    public SequencesRecord value1(String value) {
        setSequenceCatalog(value);
        return this;
    }

    @Override
    public SequencesRecord value2(String value) {
        setSequenceSchema(value);
        return this;
    }

    @Override
    public SequencesRecord value3(String value) {
        setSequenceName(value);
        return this;
    }

    @Override
    public SequencesRecord value4(String value) {
        setDataType(value);
        return this;
    }

    @Override
    public SequencesRecord value5(Integer value) {
        setNumericPrecision(value);
        return this;
    }

    @Override
    public SequencesRecord value6(Integer value) {
        setNumericPrecisionRadix(value);
        return this;
    }

    @Override
    public SequencesRecord value7(Integer value) {
        setNumericScale(value);
        return this;
    }

    @Override
    public SequencesRecord value8(Long value) {
        setStartValue(value);
        return this;
    }

    @Override
    public SequencesRecord value9(Long value) {
        setMinimumValue(value);
        return this;
    }

    @Override
    public SequencesRecord value10(Long value) {
        setMaximumValue(value);
        return this;
    }

    @Override
    public SequencesRecord value11(Long value) {
        setIncrement(value);
        return this;
    }

    @Override
    public SequencesRecord value12(String value) {
        setCycleOption(value);
        return this;
    }

    @Override
    public SequencesRecord value13(String value) {
        setDeclaredDataType(value);
        return this;
    }

    @Override
    public SequencesRecord value14(Integer value) {
        setDeclaredNumericPrecision(value);
        return this;
    }

    @Override
    public SequencesRecord value15(Integer value) {
        setDeclaredNumericScale(value);
        return this;
    }

    @Override
    public SequencesRecord value16(Long value) {
        setBaseValue(value);
        return this;
    }

    @Override
    public SequencesRecord value17(Long value) {
        setCache(value);
        return this;
    }

    @Override
    public SequencesRecord value18(String value) {
        setRemarks(value);
        return this;
    }

    @Override
    public SequencesRecord values(String value1, String value2, String value3, String value4, Integer value5, Integer value6, Integer value7, Long value8, Long value9, Long value10, Long value11, String value12, String value13, Integer value14, Integer value15, Long value16, Long value17, String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SequencesRecord
     */
    public SequencesRecord() {
        super(Sequences.SEQUENCES);
    }

    /**
     * Create a detached, initialised SequencesRecord
     */
    public SequencesRecord(String sequenceCatalog, String sequenceSchema, String sequenceName, String dataType, Integer numericPrecision, Integer numericPrecisionRadix, Integer numericScale, Long startValue, Long minimumValue, Long maximumValue, Long increment, String cycleOption, String declaredDataType, Integer declaredNumericPrecision, Integer declaredNumericScale, Long baseValue, Long cache, String remarks) {
        super(Sequences.SEQUENCES);

        setSequenceCatalog(sequenceCatalog);
        setSequenceSchema(sequenceSchema);
        setSequenceName(sequenceName);
        setDataType(dataType);
        setNumericPrecision(numericPrecision);
        setNumericPrecisionRadix(numericPrecisionRadix);
        setNumericScale(numericScale);
        setStartValue(startValue);
        setMinimumValue(minimumValue);
        setMaximumValue(maximumValue);
        setIncrement(increment);
        setCycleOption(cycleOption);
        setDeclaredDataType(declaredDataType);
        setDeclaredNumericPrecision(declaredNumericPrecision);
        setDeclaredNumericScale(declaredNumericScale);
        setBaseValue(baseValue);
        setCache(cache);
        setRemarks(remarks);
    }

    /**
     * Create a detached, initialised SequencesRecord
     */
    public SequencesRecord(open.tresorier.generated.jooq.test.information_schema.tables.pojos.Sequences value) {
        super(Sequences.SEQUENCES);

        if (value != null) {
            setSequenceCatalog(value.getSequenceCatalog());
            setSequenceSchema(value.getSequenceSchema());
            setSequenceName(value.getSequenceName());
            setDataType(value.getDataType());
            setNumericPrecision(value.getNumericPrecision());
            setNumericPrecisionRadix(value.getNumericPrecisionRadix());
            setNumericScale(value.getNumericScale());
            setStartValue(value.getStartValue());
            setMinimumValue(value.getMinimumValue());
            setMaximumValue(value.getMaximumValue());
            setIncrement(value.getIncrement());
            setCycleOption(value.getCycleOption());
            setDeclaredDataType(value.getDeclaredDataType());
            setDeclaredNumericPrecision(value.getDeclaredNumericPrecision());
            setDeclaredNumericScale(value.getDeclaredNumericScale());
            setBaseValue(value.getBaseValue());
            setCache(value.getCache());
            setRemarks(value.getRemarks());
        }
    }
}
