/*
 * This file is generated by jOOQ.
 */
package open.tresorier.generated.jooq.test.information_schema.tables;


import open.tresorier.generated.jooq.test.information_schema.InformationSchema;
import open.tresorier.generated.jooq.test.information_schema.tables.records.FunctionAliasesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FunctionAliases extends TableImpl<FunctionAliasesRecord> {

    private static final long serialVersionUID = 1021809798;

    /**
     * The reference instance of <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code>
     */
    public static final FunctionAliases FUNCTION_ALIASES = new FunctionAliases();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FunctionAliasesRecord> getRecordType() {
        return FunctionAliasesRecord.class;
    }

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.ALIAS_CATALOG</code>.
     */
    public final TableField<FunctionAliasesRecord, String> ALIAS_CATALOG = createField(DSL.name("ALIAS_CATALOG"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.ALIAS_SCHEMA</code>.
     */
    public final TableField<FunctionAliasesRecord, String> ALIAS_SCHEMA = createField(DSL.name("ALIAS_SCHEMA"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.ALIAS_NAME</code>.
     */
    public final TableField<FunctionAliasesRecord, String> ALIAS_NAME = createField(DSL.name("ALIAS_NAME"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.JAVA_CLASS</code>.
     */
    public final TableField<FunctionAliasesRecord, String> JAVA_CLASS = createField(DSL.name("JAVA_CLASS"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.JAVA_METHOD</code>.
     */
    public final TableField<FunctionAliasesRecord, String> JAVA_METHOD = createField(DSL.name("JAVA_METHOD"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.DATA_TYPE</code>.
     */
    public final TableField<FunctionAliasesRecord, Integer> DATA_TYPE = createField(DSL.name("DATA_TYPE"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.TYPE_NAME</code>.
     */
    public final TableField<FunctionAliasesRecord, String> TYPE_NAME = createField(DSL.name("TYPE_NAME"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.COLUMN_COUNT</code>.
     */
    public final TableField<FunctionAliasesRecord, Integer> COLUMN_COUNT = createField(DSL.name("COLUMN_COUNT"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.RETURNS_RESULT</code>.
     */
    public final TableField<FunctionAliasesRecord, Short> RETURNS_RESULT = createField(DSL.name("RETURNS_RESULT"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.REMARKS</code>.
     */
    public final TableField<FunctionAliasesRecord, String> REMARKS = createField(DSL.name("REMARKS"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.ID</code>.
     */
    public final TableField<FunctionAliasesRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>INFORMATION_SCHEMA.FUNCTION_ALIASES.SOURCE</code>.
     */
    public final TableField<FunctionAliasesRecord, String> SOURCE = createField(DSL.name("SOURCE"), org.jooq.impl.SQLDataType.VARCHAR(2147483647), this, "");

    /**
     * Create a <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code> table reference
     */
    public FunctionAliases() {
        this(DSL.name("FUNCTION_ALIASES"), null);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code> table reference
     */
    public FunctionAliases(String alias) {
        this(DSL.name(alias), FUNCTION_ALIASES);
    }

    /**
     * Create an aliased <code>INFORMATION_SCHEMA.FUNCTION_ALIASES</code> table reference
     */
    public FunctionAliases(Name alias) {
        this(alias, FUNCTION_ALIASES);
    }

    private FunctionAliases(Name alias, Table<FunctionAliasesRecord> aliased) {
        this(alias, aliased, null);
    }

    private FunctionAliases(Name alias, Table<FunctionAliasesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FunctionAliases(Table<O> child, ForeignKey<O, FunctionAliasesRecord> key) {
        super(child, key, FUNCTION_ALIASES);
    }

    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    @Override
    public FunctionAliases as(String alias) {
        return new FunctionAliases(DSL.name(alias), this);
    }

    @Override
    public FunctionAliases as(Name alias) {
        return new FunctionAliases(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FunctionAliases rename(String name) {
        return new FunctionAliases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FunctionAliases rename(Name name) {
        return new FunctionAliases(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, Integer, String, Integer, Short, String, Integer, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
