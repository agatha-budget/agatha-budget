/* tslint:disable */
/* eslint-disable */
/**
 * Tresorier
 * Tr√©sorier api front to back
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    budget_id: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    archived: boolean;
}
/**
 * 
 * @export
 * @interface Allocation
 */
export interface Allocation {
    /**
     * 
     * @type {number}
     * @memberof Allocation
     */
    category_id: number;
    /**
     * 
     * @type {number}
     * @memberof Allocation
     */
    allocation_month: number;
    /**
     * 
     * @type {number}
     * @memberof Allocation
     */
    inflow?: number;
    /**
     * 
     * @type {number}
     * @memberof Allocation
     */
    outflow?: number;
}
/**
 * 
 * @export
 * @interface Budget
 */
export interface Budget {
    /**
     * 
     * @type {number}
     * @memberof Budget
     */
    user_id: number;
    /**
     * 
     * @type {string}
     * @memberof Budget
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Budget
     */
    id: number;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    budget_id: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof Category
     */
    archived: boolean;
}
/**
 * 
 * @export
 * @interface CategoryAllOf
 */
export interface CategoryAllOf {
    /**
     * 
     * @type {number}
     * @memberof CategoryAllOf
     */
    id: number;
    /**
     * 
     * @type {boolean}
     * @memberof CategoryAllOf
     */
    archived: boolean;
}
/**
 * 
 * @export
 * @interface MonthlyBudget
 */
export interface MonthlyBudget {
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudget
     */
    month?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudget
     */
    from_last_month?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudget
     */
    income?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudget
     */
    budgeted?: number;
    /**
     * 
     * @type {Array<MonthlyBudgetCategories>}
     * @memberof MonthlyBudget
     */
    categories?: Array<MonthlyBudgetCategories>;
}
/**
 * 
 * @export
 * @interface MonthlyBudgetCategories
 */
export interface MonthlyBudgetCategories {
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudgetCategories
     */
    category_id?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudgetCategories
     */
    allocated?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudgetCategories
     */
    spent?: number;
    /**
     * 
     * @type {number}
     * @memberof MonthlyBudgetCategories
     */
    remaining?: number;
}
/**
 * 
 * @export
 * @interface OnCreateAccount
 */
export interface OnCreateAccount {
    /**
     * 
     * @type {number}
     * @memberof OnCreateAccount
     */
    budget_id: number;
    /**
     * 
     * @type {string}
     * @memberof OnCreateAccount
     */
    name: string;
}
/**
 * 
 * @export
 * @interface OnCreateBudget
 */
export interface OnCreateBudget {
    /**
     * 
     * @type {number}
     * @memberof OnCreateBudget
     */
    user_id: number;
    /**
     * 
     * @type {string}
     * @memberof OnCreateBudget
     */
    name: string;
}
/**
 * 
 * @export
 * @interface OnCreateCategory
 */
export interface OnCreateCategory {
    /**
     * 
     * @type {number}
     * @memberof OnCreateCategory
     */
    budget_id: number;
    /**
     * 
     * @type {string}
     * @memberof OnCreateCategory
     */
    name: string;
}
/**
 * 
 * @export
 * @interface OnCreateOperation
 */
export interface OnCreateOperation {
    /**
     * 
     * @type {number}
     * @memberof OnCreateOperation
     */
    date: number;
    /**
     * 
     * @type {number}
     * @memberof OnCreateOperation
     */
    account_id: number;
    /**
     * 
     * @type {number}
     * @memberof OnCreateOperation
     */
    category_id: number;
    /**
     * 
     * @type {number}
     * @memberof OnCreateOperation
     */
    inflow?: number;
    /**
     * 
     * @type {number}
     * @memberof OnCreateOperation
     */
    outflow?: number;
    /**
     * 
     * @type {string}
     * @memberof OnCreateOperation
     */
    memo?: string;
}
/**
 * 
 * @export
 * @interface Operation
 */
export interface Operation {
    /**
     * 
     * @type {number}
     * @memberof Operation
     */
    date: number;
    /**
     * 
     * @type {number}
     * @memberof Operation
     */
    account_id: number;
    /**
     * 
     * @type {number}
     * @memberof Operation
     */
    category_id: number;
    /**
     * 
     * @type {number}
     * @memberof Operation
     */
    inflow?: number;
    /**
     * 
     * @type {number}
     * @memberof Operation
     */
    outflow?: number;
    /**
     * 
     * @type {string}
     * @memberof Operation
     */
    memo?: string;
    /**
     * 
     * @type {number}
     * @memberof Operation
     */
    id: number;
}
/**
 * 
 * @export
 * @interface OperationAllOf
 */
export interface OperationAllOf {
    /**
     * 
     * @type {number}
     * @memberof OperationAllOf
     */
    id: number;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof Person
     */
    deleted: boolean;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    email: string;
}

/**
 * BudgetsApi - axios parameter creator
 * @export
 */
export const BudgetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new budget
         * @param {string} name name of the new budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBudget: async (name: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addBudget', 'name', name)
            const localVarPath = `/budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required

            // authentication refreshTokenId required

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a budget
         * @param {string} budgetId id of the updated budget
         * @param {string} newName new name of the new budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudget: async (budgetId: string, newName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'budgetId' is not null or undefined
            assertParamExists('updateBudget', 'budgetId', budgetId)
            // verify required parameter 'newName' is not null or undefined
            assertParamExists('updateBudget', 'newName', newName)
            const localVarPath = `/budget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (budgetId !== undefined) {
                localVarQueryParameter['budget_id'] = budgetId;
            }

            if (newName !== undefined) {
                localVarQueryParameter['new_name'] = newName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BudgetsApi - functional programming interface
 * @export
 */
export const BudgetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BudgetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new budget
         * @param {string} name name of the new budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBudget(name: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBudget(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a budget
         * @param {string} budgetId id of the updated budget
         * @param {string} newName new name of the new budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBudget(budgetId: string, newName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBudget(budgetId, newName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BudgetsApi - factory interface
 * @export
 */
export const BudgetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BudgetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new budget
         * @param {string} name name of the new budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBudget(name: string, options?: any): AxiosPromise<string> {
            return localVarFp.addBudget(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a budget
         * @param {string} budgetId id of the updated budget
         * @param {string} newName new name of the new budget
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBudget(budgetId: string, newName: string, options?: any): AxiosPromise<string> {
            return localVarFp.updateBudget(budgetId, newName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BudgetsApi - object-oriented interface
 * @export
 * @class BudgetsApi
 * @extends {BaseAPI}
 */
export class BudgetsApi extends BaseAPI {
    /**
     * 
     * @summary Add a new budget
     * @param {string} name name of the new budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    public addBudget(name: string, options?: any) {
        return BudgetsApiFp(this.configuration).addBudget(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a budget
     * @param {string} budgetId id of the updated budget
     * @param {string} newName new name of the new budget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BudgetsApi
     */
    public updateBudget(budgetId: string, newName: string, options?: any) {
        return BudgetsApiFp(this.configuration).updateBudget(budgetId, newName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a person
         * @param {string} name 
         * @param {string} password 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson: async (name: string, password: string, email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createPerson', 'name', name)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('createPerson', 'password', password)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createPerson', 'email', email)
            const localVarPath = `/person`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (email: string, password: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('createSession', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('createSession', 'password', password)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required

            // authentication refreshTokenId required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update session token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionRefreshPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/session/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication accessToken required

            // authentication refreshToken required

            // authentication refreshTokenId required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a person
         * @param {string} name 
         * @param {string} password 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerson(name: string, password: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(name, password, email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(email: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSession(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSession(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update session token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionRefreshPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionRefreshPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a person
         * @param {string} name 
         * @param {string} password 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson(name: string, password: string, email: string, options?: any): AxiosPromise<string> {
            return localVarFp.createPerson(name, password, email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {string} email 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(email: string, password: string, options?: any): AxiosPromise<string> {
            return localVarFp.createSession(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession(options?: any): AxiosPromise<string> {
            return localVarFp.deleteSession(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update session token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionRefreshPost(options?: any): AxiosPromise<string> {
            return localVarFp.sessionRefreshPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * 
     * @summary Create a person
     * @param {string} name 
     * @param {string} password 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public createPerson(name: string, password: string, email: string, options?: any) {
        return PersonApiFp(this.configuration).createPerson(name, password, email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {string} email 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public createSession(email: string, password: string, options?: any) {
        return PersonApiFp(this.configuration).createSession(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public deleteSession(options?: any) {
        return PersonApiFp(this.configuration).deleteSession(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update session token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public sessionRefreshPost(options?: any) {
        return PersonApiFp(this.configuration).sessionRefreshPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * 
         * @summary ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any): AxiosPromise<string> {
            return localVarFp.ping(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * 
     * @summary ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public ping(options?: any) {
        return TestApiFp(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }
}


